{
	"info": {
		"_postman_id": "ba02ed8a-f424-4026-853b-97651574dd16",
		"name": "ADP Integration Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "539613-ba02ed8a-f424-4026-853b-97651574dd16"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "cc0e7bd3-c817-452a-ae24-fee36fdf3c60"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "36c2f4f2-6d96-45e8-b44f-c96f23dd3702"
							}
						}
					],
					"id": "6f8cb46c-7a9e-43c3-8c03-6071a83f3ecf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "edf3c678-94e4-490f-a6ae-6643dcb4e645"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "c14dcbbb-7635-4a4b-a2e0-3c600ac989dc"
							}
						}
					],
					"id": "7f479dec-eebc-483c-8b50-b51b72a85012",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "1e7ce97c-e3df-47d2-ad0b-94f9c5337452"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "59c2c7a5-ba36-4e73-a582-4298f0e23794"
							}
						}
					],
					"id": "297caa1a-f95d-4d7a-9099-395ef0cc284b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "58e6559c-a4a9-4282-aca7-d39f43fde191"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "40bdf4c6-1089-41e2-a0b7-406c4723ac6d"
							}
						}
					],
					"id": "8c01728c-d5b2-454a-98e5-c0c1ebeaab5f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3c525c51-ef0f-4ee5-89eb-bba27c1f2bce"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "6c6ff21b-84d5-4632-9515-84a5bf30c63a"
							}
						}
					],
					"id": "ad5a5b78-61e8-4079-8d08-35670c851ee5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "cbaa770f-1c84-4983-b57b-023793daebce"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "cd4ee084-7d64-4219-b8ef-d1a2779c819c"
							}
						}
					],
					"id": "a998b8f2-f58f-489d-b01d-60b307a9cc39",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "9027c833-eff7-45e3-b91f-774285a9122e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6315e59f-52e9-4a7f-a801-37aa999449e5"
							}
						}
					],
					"id": "dbb92a51-0ba0-4172-9d59-be3e1380dee4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "177c4b05-ed1d-47af-93fb-9908938b4505"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2d563118-8458-43f2-ae27-7b264f91ea69"
							}
						}
					],
					"id": "24b177e2-a757-4053-93f5-6ab933182903",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "93afe15f-eabe-4095-9a89-1d3a3f292601"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "7dfe4623-a889-45e5-bfe0-9bbfaf043871"
							}
						}
					],
					"id": "463e3102-9068-4715-af09-e6a84ec4480d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "3d8f032b-0acb-40c5-b99d-b34ae04c7b72"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "4d46b639-6da2-4207-aee9-b6ceeb58da7c"
							}
						}
					],
					"id": "e4a82f91-1adf-48a2-bd9b-efd4770eb822",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "b875726f-1711-4c16-b3bb-196308a5af66"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "20dd9d57-0c3b-4c01-a277-6e5a9afd9a4b"
							}
						}
					],
					"id": "046b7339-9e66-4dc7-9c10-fa23a3c0345e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "030b73b8-f244-46af-b3ad-80672e3619d0",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "40842074-77d2-49c6-9e7d-4059d1ea5fd1",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "7b73f118-d320-4952-b91b-be443a2fd745",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "96ee96e7-f3c0-4570-9604-1e73f12a9f21"
							}
						}
					],
					"id": "a495138c-88b0-43d9-9a75-c82ea2807a74",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "24a29e22-33fa-40a3-b1e5-71031076a801"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "55ff8328-5ec4-4fa0-b1f9-a0dbe2f1e6f5"
							}
						}
					],
					"id": "464c6141-f22e-45ed-b908-7236ae9ec221",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "4af7069d-9719-4e55-b562-fddd5bd258bd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "0267e9b1-d413-4111-ab15-2dcfd0f79dad"
							}
						}
					],
					"id": "08e83d75-5b88-46a5-a9ad-adf13fbdf51e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "7c763978-a280-4898-be9e-b3bad7bd083c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "8f7cfa6b-a3bb-4fa3-ad60-7d1eeda33532"
							}
						}
					],
					"id": "c627274d-f0a5-4b43-8b6f-0fb67e2e0461",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "460d671f-24ce-4c3d-a71c-8ec91e6a8fee",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "1691cced-4caf-43ec-9a51-a6e122e61fed",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "3da4f60b-90c5-4774-b971-4987a8655d71",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "d3e59e86-0db7-49ee-94bf-1e414ae7bb17"
							}
						}
					],
					"id": "43e42949-d4f8-4431-b473-004132bb7b11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "08d1717d-ea49-49fb-b2a8-b6af8c299bf4"
		},
		{
			"name": "Setup Copy",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5843d354-a40b-44f4-b0a1-20306a8a028c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4c16834c-8e50-4af6-abc9-5debee677796"
							}
						}
					],
					"id": "6a1d57ee-6d3c-4e03-a51b-92ae89fed718",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "5dcd036a-a8e6-437c-bc7f-67d37242375a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ae05a848-c8e2-41fe-bad0-50bda7d91412"
							}
						}
					],
					"id": "e3854729-2df5-48f6-8e5f-6ac144dbc1b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "86669808-e180-4d7c-bbb0-e1dc54b46436"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "53c197ca-462b-446b-a532-db58d11ea65c"
							}
						}
					],
					"id": "8e92a030-8ae6-49f2-a20d-179e34598c31",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d7b4d322-9752-4313-b921-1114c70aa54f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3a828f8e-0bcb-48d7-8111-a7eedabc6de0"
							}
						}
					],
					"id": "a1cc2ec3-9cf1-403d-a226-5c120266acda",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "908fcce3-eb98-4791-b81b-38460f29440f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "7490c389-da99-4457-8397-12af881eaf89"
							}
						}
					],
					"id": "6933f046-8c5f-4cf5-a5cb-02debadcdbaa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "8f280256-3108-4aa3-a71a-a8820ee55ce8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "30c3c8d6-b268-42f1-8aad-db04a6d95d0c"
							}
						}
					],
					"id": "772b57ae-7e2f-4d0d-91f2-18b5c5352670",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "bb3f1b81-2d97-4878-802a-c6d5e03c8348"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c38140ed-d726-4c39-a825-17548d79addb"
							}
						}
					],
					"id": "56a6d75e-0284-4b1f-9802-7f64ab2d5be3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "e86183d1-2271-455f-8fb3-883495fd787d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d63f5f78-9939-495a-b121-34b1ef046ee6"
							}
						}
					],
					"id": "c97628aa-51c1-4f8c-a878-c128304392c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4834c569-3c25-4784-a55d-e0fd5a30a210"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "95c49752-88de-46f5-b35d-79df25978792"
							}
						}
					],
					"id": "085b23c4-3f50-46f1-ac5b-26f749bd4178",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "a1f2f445-3589-4461-b7f6-583505546e3c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "00cd8bc4-bf54-459c-bd9b-0a180a3dac61"
							}
						}
					],
					"id": "f9975376-3b32-4d2a-a664-c1d0d73c87b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "34bacab1-5bed-4f1a-98d1-0dcfae53d7d5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "14126931-ffb7-47a8-9f38-548430e993c3"
							}
						}
					],
					"id": "a0469eff-c82d-4463-aee6-cf7f9d511053",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "3cf229ac-925e-44a4-b399-f6672e26dc6b",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "da41e793-2057-471f-b1d0-9d33498d23f3",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "533685b9-8b0d-4f2d-991b-683b67c4ce0b",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "2dc03668-6cc5-440e-aaa0-79fa1a4b0bfc"
							}
						}
					],
					"id": "97b58bf3-11b5-4ffe-8aa9-5c95e21302c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "a97dfdfa-493f-4c19-b7ac-ca81a19b8c02"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "897ef4b8-1838-4eb8-9bfe-f837f662ba48"
							}
						}
					],
					"id": "5f379ba6-50d1-4bd3-9681-040d1fdd2364",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "5e3ce110-e3b3-43bb-a4d5-46f13aa46240"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "f88214f8-1e48-450a-85d6-12e653d3f60f"
							}
						}
					],
					"id": "d8a98374-9e19-4283-9412-ece6994525cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "b72b34b6-bc58-4257-a264-e2302f62c362"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "771f97cb-7d28-4b31-98ce-86ccc7f8af30"
							}
						}
					],
					"id": "8b4426ec-e030-492b-8fe1-edaf01327cf5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "740bd46d-17ab-4703-9d92-9feb78c0d585",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "82beddd9-a0cd-4f2d-b5cc-8b05ea48fc26",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "3aeb2855-ca7e-4827-99e5-378c79f5daee",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "53fec5f5-640e-4ff7-abb0-8e61fb320d29"
							}
						}
					],
					"id": "614f9c1b-1b70-48d2-a7f2-445278bf4aa7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "bf1be4a7-ff96-4623-9250-9483eb487e1e"
		},
		{
			"name": "Setup Copy 2",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7477c5e3-ab52-4a8c-8391-48ac5e035836"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "81837d8b-da11-4261-b8df-f9ff73c6eb54"
							}
						}
					],
					"id": "e9189a12-f459-45c8-8b44-a505efba5e36",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "e7419592-0205-40e9-9a43-4359fe1af53d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "181882f2-b90e-4059-8ce9-e29928838016"
							}
						}
					],
					"id": "9891c785-3eff-4264-ab33-b89c98833d0a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c50756db-b470-44dc-937c-1afa1bcba834"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f7889997-a696-4833-b0ee-02b55d68baf1"
							}
						}
					],
					"id": "d324eaa3-2639-4823-8f10-faed9aa22a17",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "580d9327-a9c8-4627-b317-3f47071c7583"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "93211b7d-26b3-4b28-9838-782e8f48d9d0"
							}
						}
					],
					"id": "98bbcf4b-77f8-4658-a259-1b52c58e944d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b0666f75-2ce0-4b9e-937c-9b270d06246d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "548b44f8-bd02-4c27-8ef2-0341a71e18ae"
							}
						}
					],
					"id": "b8e52a1f-8693-4ee8-ba64-5f6f545fa88a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "4324c333-dc34-4d51-976b-06f6c6bfd192"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "06a24b7b-2907-4a1b-8a30-df0d4625aa2c"
							}
						}
					],
					"id": "b1907d04-5dd4-48ba-a657-38e92438dbe3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "010b1f6d-0431-4124-958e-5146899d8b90"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "677b492f-747b-484c-96ff-2da8047d9310"
							}
						}
					],
					"id": "b651dfce-9f59-499f-b123-6441906b3d80",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "37ead19b-b955-4482-b0f8-56f59cf0c8f4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f702e1bb-0539-4431-9803-9ce6e502ce28"
							}
						}
					],
					"id": "1dfb6cba-0344-4744-a98a-2f82569bb830",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7e3bf6d2-9fb0-4923-b236-2f8886fe4731"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "89da261f-c2e6-46ef-9a2e-8eac306d9075"
							}
						}
					],
					"id": "fc2527e8-b9ca-44ec-8d78-6cae04bc9b67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "213ce49d-c031-4e3f-80b6-a45dfcf9a386"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "bbd55143-d2fe-45ed-a56d-a0f8d56d4ee1"
							}
						}
					],
					"id": "036e7d57-b885-4fce-a683-d58d4a72cd5a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "03d86d1e-4731-4471-a78a-956c388216e2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "9149b575-7d4a-4ed8-bdbe-45ebe88765c9"
							}
						}
					],
					"id": "b9fcae33-c352-4aa3-bfae-edc6b7722add",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "7b0efdbc-e3e9-41ac-bc2c-776989f9b479",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "fbf01aaf-ccbc-4084-8187-705e9b806075",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "9cc508f3-a687-478d-a8b2-043d4affcca6",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "798a92f1-da16-48fa-a2b0-e6542d59aa53"
							}
						}
					],
					"id": "29a54c23-190b-4b3f-b726-57ce953ddca9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "a9de784a-b5b1-4371-8f5e-58a594997de1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "df322165-7820-4e44-a389-79d405575854"
							}
						}
					],
					"id": "0b8e7d05-a286-40f4-9541-e20b8a7fc028",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "976862d1-4b3f-411d-bb5e-0bea2f195249"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "6ccf440e-22fe-4b13-8007-45d4c69d5642"
							}
						}
					],
					"id": "883c215f-cd74-4a94-996b-a50a287a126e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "b8f2b6c0-38f2-44ff-9042-38ff873228ea"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "56ac9f94-1587-4072-86cc-8973b58c7437"
							}
						}
					],
					"id": "671c82c6-2b4f-4551-9967-a420159161cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "fb54e77e-bdf1-455c-8045-56feae18df28",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "13f000db-4cba-4b12-958c-e983acf2dd21",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "980688d9-e725-44b5-a830-0035496efd62",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "a1b087be-ea08-4252-865d-1a0707f3f885"
							}
						}
					],
					"id": "b66d205a-c704-4a5b-afb3-a9c1ae36b92f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "293b9599-62c7-4812-a0e4-cb7df5553611"
		},
		{
			"name": "Setup Copy 3",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "002590ce-da5d-4cfb-bd48-ed13ffd44f5e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "93fd2165-1f98-40e3-aecf-18a83493d2d1"
							}
						}
					],
					"id": "6c57399a-8924-40f5-a6e4-c783142ab909",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "415e3c3f-c83b-42be-ba3c-10080d8da913"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1cea5975-9369-45fe-b50a-54dc37fa3eb9"
							}
						}
					],
					"id": "ced153f3-e0d6-4e8d-a7ea-f091a1215986",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "cc64c730-4754-47df-b64f-cee6daa3514e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "91db874a-ccf4-4c95-9709-dd4c13da26e0"
							}
						}
					],
					"id": "21ead504-25ac-4d16-82af-4b13ac8f089c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "2dde6c69-612c-4e7f-ad2a-0c7d664278c4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d088899b-32bd-443b-b22b-9ccea7b54a6e"
							}
						}
					],
					"id": "95e244f4-1410-4ef0-b98b-b62cc2881fa4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3e622827-5a79-44d5-be4f-86f0d60704e6"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "b78c0ed4-7f4a-4de0-820d-32e88115605e"
							}
						}
					],
					"id": "8c55f8e4-8f2e-44de-b424-60a18ed8d168",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "8a0523ef-e371-4cda-8d52-04bbd683be66"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e20797f0-32c2-45af-9f52-332488170263"
							}
						}
					],
					"id": "61acbd41-b757-43d5-ac7d-143ad4bc8be9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "85c38af7-1842-45cc-b689-5d923dbbdc0f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "54f30a50-e23b-4b91-89cd-0e6920a25604"
							}
						}
					],
					"id": "26831d0d-4f41-41e9-8d5c-1f9352de8c54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "73fac040-b43e-4cfa-8e7d-520d383b915c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "715bcd93-addb-4ef5-b121-71355ed2fd84"
							}
						}
					],
					"id": "836e7651-7372-4412-80ad-9dd3af9ea7ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1d211807-f21e-4cd5-8a19-7f7f52130eb8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "920cedb5-41ab-40de-92c9-538c577cbe6a"
							}
						}
					],
					"id": "c00dbca9-da45-4a9d-a819-b7053d16fd8c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "17ffd343-6db1-4440-b980-eff00da0869d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "5fcbef2d-3726-4c30-b5e8-b73ba63f92f3"
							}
						}
					],
					"id": "a0a5e3cc-f1cc-45b9-8408-b7221317a885",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "0603be26-bcd4-4ac6-90d4-b24db693608a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "7d07f228-3dde-4bea-9c83-ba6871ff09ba"
							}
						}
					],
					"id": "1bc1e97f-57b1-4767-b5a8-4a0c9d0565cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "c31f7b52-5eb2-4bbb-8ea0-74eac8aaae5c",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "dbebb9a7-64dc-4072-b3f4-ab1efd7554dd",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "b0e9ef47-0fd6-42c0-b0ec-97bc618129cc",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "6e28c1ba-9953-4d43-a266-4a2ac7b468b7"
							}
						}
					],
					"id": "34045687-6990-47e4-bc3a-0cc64be17b61",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "6de58af5-bb76-48ad-988a-b9b8b2b43c73"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "dba60741-781c-46ef-8939-27793cacb1d9"
							}
						}
					],
					"id": "c0977a61-6249-4342-bd7a-8dfe17714142",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "7238405b-b99e-46f9-8049-fa8b2e7f75ac"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "f436becf-7eee-41d6-94a8-b30a2429d931"
							}
						}
					],
					"id": "d26d13c2-a97f-4640-ba76-495f64113b6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "a6bbf090-0d1e-4819-9109-1e1ffaf311bb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "93117ea8-6f28-4415-9081-0912b9503d0f"
							}
						}
					],
					"id": "0e3702be-6925-4897-ac79-c99bcbb2f192",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "6945adef-8715-412d-9747-015912c6cf39",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "611b1803-f440-47cc-a50e-8d1f072e75ee",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "2b328675-f228-4f08-9278-45da6cd3babe",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "e52a1b95-82f7-4401-950e-3e84b9e0c568"
							}
						}
					],
					"id": "79a0c074-4ab0-4ae0-b32f-51d2b26229d4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "1261e1ff-c79c-4d99-b903-585507df0fb9"
		},
		{
			"name": "Setup Copy 4",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "61873d50-d080-41ad-928a-6c10a25a2d02"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4fec576b-a2d0-484f-8a0a-013b1eb28a55"
							}
						}
					],
					"id": "92bee36c-8b81-4419-b6ae-3ec28df8203e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b530fd31-d083-4fd9-92f5-952859b56233"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "2ba88eef-2337-45e9-8013-ef551969d6cc"
							}
						}
					],
					"id": "29fd3e68-43b8-4be8-92a5-a4a7f3031dfe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c7cb332c-f2b8-476f-bb63-40f0b9cb52f3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "95da5dab-e76e-4ad5-9529-80ae5fb71b5e"
							}
						}
					],
					"id": "7b0dda8d-0cd7-4589-81d3-3aa499a453ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "9a1297a3-5b1c-434f-b25b-65f32075ad2a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b83a1d58-44e4-42e9-a181-cacf2b03b989"
							}
						}
					],
					"id": "4a34897a-5578-4c6c-95d3-e6ba8181c2d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7916d1ff-86ec-4332-adf0-8d4ea180a68a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "2549dc31-c7d7-48f9-a165-b933721b0a11"
							}
						}
					],
					"id": "1faf8101-8045-464f-9f84-52554db790e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "501d6eab-a7f5-4358-999f-83009faca547"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1854b7de-5e11-4b8d-93f0-a611e3471af2"
							}
						}
					],
					"id": "e34f9221-a073-439e-a0d9-4f8c5eb92dc8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "6698e2e6-3294-43b2-b1e0-3ee1c3594ee4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6ffd799d-f3a6-4939-b542-37a8f115f03b"
							}
						}
					],
					"id": "ab7681b8-b36d-43d4-a351-ffe471be8314",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "05e244e0-7ed0-4f22-8083-9add5e53c798"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "82d2052d-555b-4c9a-8850-3fff155a6c8c"
							}
						}
					],
					"id": "fe023438-ac10-4e7e-982d-af4e4f755939",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7cc6c96a-111d-4501-a725-cfef00f13b92"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "871fbff6-d30d-4ac8-8b55-c774847c0087"
							}
						}
					],
					"id": "7410be3f-712a-4528-b238-110878584c47",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "5e7de654-9ed7-4014-903b-e8e10a698f80"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "f2ab0268-f480-4434-b89a-080d8c413f02"
							}
						}
					],
					"id": "728d7edf-cb74-4244-8a2e-49ce319104d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "0ba97a56-d98a-4aee-af27-e8cc21e49c7c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "af479d65-6ef0-4758-9b15-085e58c2c362"
							}
						}
					],
					"id": "06755862-2f38-4338-b928-b07e0fbcabb0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "a93b7e5c-b29d-44ea-804b-c5da32896547",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "bca77b9b-79e0-43c4-90f1-eed48c6b9d92",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "664965db-bc0b-4a96-b115-3bde21c5140c",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "2395d8db-ca5a-424b-9912-f88aa5eb7327"
							}
						}
					],
					"id": "d33ac970-2983-48df-a84e-fbab77e587ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "4f9c48c3-cf7b-4e50-9de9-dc89d00b411e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "651565ef-39f8-465a-9c4e-6ade18a9588e"
							}
						}
					],
					"id": "869a4375-76d0-4b99-95ea-8035491343ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "b637ee03-de2c-48c6-8e7e-cd3eb52245d9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "95966e9e-49c0-453d-a8ed-57153b5c2a41"
							}
						}
					],
					"id": "80935363-5508-4dfd-a296-68e24795f244",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "fa7da96c-8533-4f69-a4e2-7ca0b6224131"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "32e2ea9c-3120-4578-babe-53a15eff5705"
							}
						}
					],
					"id": "84b52444-27f5-4e02-95f5-3c2f06c68537",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "afd0e25e-4e3d-4b63-86fe-81a1c56dc909",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "b96ca0fa-9395-4cc7-9610-230c1d6fddb2",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "2971372c-9b22-44b0-bd0e-d86564e726a6",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "45bc03f7-1acd-4dae-9fa3-5fd22a0e9688"
							}
						}
					],
					"id": "73cd4677-a4df-49e8-b92c-86acdf911e9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "e5cb79f2-404d-40c9-a23f-8688ab093bb3"
		},
		{
			"name": "Setup Copy 5",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "0f927633-ed01-4bb3-85cf-ba98342ca74a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "11026a39-e6ec-4b4c-850c-d581e60c35d2"
							}
						}
					],
					"id": "84dbe83f-b1f4-47f0-9db5-c047310403d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "db44df00-32fb-4d66-b1b5-41ed91eae74b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "4c74733b-b9ae-4004-99f6-b5fa1573f4d8"
							}
						}
					],
					"id": "93b7724e-e84b-40be-90c2-0686bb26baf0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f28764b0-f2d1-4cb8-b2f9-cca6c8924851"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "426ac0ec-0f3a-4950-8aea-e48a272ca1ed"
							}
						}
					],
					"id": "3425a365-1431-40c3-a914-b3bb9ffa5984",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ef38be6f-73a2-4243-93d0-e5946782a6e8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "20792eb1-1d9a-43ca-9ad0-2503f1fae1cb"
							}
						}
					],
					"id": "9a282249-59e7-4b12-a5a1-36036dcaa2de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f0e3364e-5d4c-4a11-8474-f505d03cda55"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "65cbda46-7bc1-4347-b386-25ded5c46992"
							}
						}
					],
					"id": "eae6c3ed-ee3d-4e2f-8e36-19c19413fd24",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "9bfb6af2-98a7-4a0e-a60e-f858a95f25da"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a47ebabe-b321-4f24-a793-962696b54da8"
							}
						}
					],
					"id": "854e259c-132e-43eb-b4e8-6c2ff4db3df0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "1f86a662-1b73-411d-ae49-0201f6dae385"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ad57658d-eef0-4fde-8087-b771a0cac41d"
							}
						}
					],
					"id": "a05f5f94-37da-48c6-8856-471c9bbf44cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "43e01061-8c2c-4dc2-b82a-8b3e7c691593"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "94ebd6ac-4dec-493a-b35b-7df890724885"
							}
						}
					],
					"id": "0dfb7645-7bba-4f13-98bf-2a52fbf2e36c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e227018e-86aa-470a-adad-bb52330fca9d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "66bbb3f1-7fe3-4e0a-b642-aa7549d0e3ea"
							}
						}
					],
					"id": "f76f8c27-3a68-40e9-99f4-891443828cda",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "8b41108c-f5ba-471b-94d0-a6110d097361"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "61d1ac44-acdd-4e0c-ad60-67f419ffb4d7"
							}
						}
					],
					"id": "2369c3e8-68bc-46d8-8eb7-7b29ce3a009b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "36c0161f-79b6-4468-8d8b-d5be4f42b934"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "42112589-d894-48dc-82a7-853d9161a1e8"
							}
						}
					],
					"id": "8f2293cc-0b26-48fd-9edf-9110a02d1b7f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "084aa5ce-44aa-4164-b601-eb2ef675542b",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "dfcb8c89-fa85-4315-8a56-1b076d40c63e",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "a0f65a4b-0474-4286-b657-084b8661cc21",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "19ac23a6-98b3-4012-b6b7-3486d7f536c3"
							}
						}
					],
					"id": "a1693b4b-92ae-4ad8-9ea8-b43d72746dd4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "9ffa7856-16a5-4e20-8a5c-bad14cec0835"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "e7e26845-eb14-4e61-845b-0e16a0a7f72f"
							}
						}
					],
					"id": "ea5e3367-0768-4240-92c1-48d7b8b33303",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "eddea1e5-5a00-4d0b-bf1e-f91bd333f428"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "c8b46958-a6ea-4aa0-84d9-ad5967a9f72b"
							}
						}
					],
					"id": "400aeccb-f3d2-4f61-9099-35e52d771f78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "8713ab44-816b-44a3-8347-3eb0db5a0eec"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "e8cfa1c1-7ee4-4e19-8c62-1a9b06bdaee9"
							}
						}
					],
					"id": "5a96be88-e410-4cc8-818b-eb433eae7f16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "66ad25f7-8c33-4010-a9ea-bc8464ad14a8",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "1651bb00-d588-4b4d-89ad-079ccbb9c4c9",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "193fc623-a7bb-4d39-b66b-31192c8e257b",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "63b50a28-1111-4b28-88cb-694c519ddbaa"
							}
						}
					],
					"id": "11c84de1-f9e7-4e50-b55c-acc2cd206d96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "c72e0799-ebc6-453e-bb19-2cc46175cf34"
		},
		{
			"name": "Setup Copy 6",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b97a199b-1861-48fa-ad69-95cfe8a37931"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3d726815-4fbe-458c-95fb-126649b8555a"
							}
						}
					],
					"id": "a94770d3-16db-43ed-9a25-f1da5d8fac12",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "7b594d9a-1870-4a4b-b9e9-989a7591d564"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b0678cf5-0ad7-4228-8a36-11e5f7097dbb"
							}
						}
					],
					"id": "c2c3b1db-60c6-4b51-a7eb-853339910c58",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "d386b95a-d7aa-478b-950c-2a1d979e53b3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1a4e8eed-5c9d-4737-a02e-57f75cc10aa2"
							}
						}
					],
					"id": "ed6a6aab-2c84-43d2-a73f-1f432274f5b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b276c47b-2180-4f15-9aa2-1dbd54e41c01"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "79032c8e-8c2b-4cd1-92d3-6a559e4b7a5a"
							}
						}
					],
					"id": "656642fb-3d6a-4cbc-8bcf-618bdb7bf3b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "485409bc-7a42-4bb5-be83-44ee5677d3dc"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "231ee389-3636-46cc-9084-e24399195c7d"
							}
						}
					],
					"id": "e0ee8c41-6a62-49ff-8e68-fbb8ce0bd4b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "d3f171dc-f87b-48f1-9c6c-047ff9875f77"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "2718cdea-18d8-44c0-a75d-696349000cd5"
							}
						}
					],
					"id": "4df717be-5785-4d76-96ea-bdabd1f41d4b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "04ebf2fa-d7a4-49cd-834d-2981d05cdb81"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "aad146b0-fbae-4ba8-976f-3a4f314b7483"
							}
						}
					],
					"id": "f30e57b2-615e-4726-b824-115c9675fe01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b02cdde4-fa33-474c-b3f9-3658eecb438a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3987c85a-a28f-4f56-af25-e72cace03d71"
							}
						}
					],
					"id": "752c27a4-87c2-45c4-a0ec-61c09a447c86",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9d2fbbad-f03b-4a96-bf0c-5fad83c39318"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "3ea2610f-bff6-4710-ab6b-c2cff0b27d7a"
							}
						}
					],
					"id": "c33b9612-02ae-49e3-88db-0802a4c31e79",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "438b71d8-6e34-49ba-9c37-c1995f971b62"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "dc16f442-398f-4e0c-a25e-f4eecdf54758"
							}
						}
					],
					"id": "c6610d5d-8030-44d3-9ea6-26615220336d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "443dad83-1efd-46fc-b4a7-fcaacb5f2d85"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "bb3647b9-3e79-490a-9aef-c1ab0ae92cff"
							}
						}
					],
					"id": "335da5e8-a345-43ae-b294-ba9e3c4d0fac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "aac22170-d17e-4242-bde1-9126f1b0ca22",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "a8c9317b-c085-4919-ac90-9d49eecd6f9a",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "9c546f0c-83b2-4501-a5b9-85814af7bb74",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "b5445695-7bbe-49e5-bac1-00a333024ead"
							}
						}
					],
					"id": "7aac1631-c194-4589-9b9c-04a3a490dfb1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "4bf14a48-184c-4443-bc17-b9454bc5ef02"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "b44d57d6-f1a7-436e-a65b-d0eb04343129"
							}
						}
					],
					"id": "2260d740-37f5-41b6-8e90-4032a253b111",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "8bb3812c-38b1-4529-9fab-2366bca3c0e8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "6c376796-f5cb-4e20-8415-89a30b86f54d"
							}
						}
					],
					"id": "b52b110a-09bb-4b31-9164-74fe4569fca6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "08d674ec-ecbb-41f8-a93e-c35ce83648bd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "ccfbe722-22a2-4ba6-b450-20bf4624ffca"
							}
						}
					],
					"id": "e71a03d4-0172-437e-b50c-4c11ed059ecd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "91a43d10-0ede-4692-92ef-181d5a4d86f3",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "b54ab856-3e96-4f41-97ff-f3df0c2a5631",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "30a447ac-7a0b-4491-992b-f9a2d3d97101",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "89cfac85-4f07-4173-9412-68a5f4f95531"
							}
						}
					],
					"id": "c409bbbd-649d-481a-b678-4339044d78eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "0a897e54-0bef-435a-a16a-a9f93704a40e"
		},
		{
			"name": "Setup Copy 7",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "6c0e8298-afb5-4069-b21b-285f45ae679d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "694dc5f1-7d76-4506-9dda-a666ca1f5384"
							}
						}
					],
					"id": "40407fb7-4713-4a3f-9fc5-b2720acd960f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "0e0c3844-f0ec-4f2d-a1cc-ea372f4a8e58"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "aaccc109-2512-4b78-a66a-3b85805b8053"
							}
						}
					],
					"id": "34b98dc5-91b2-466a-a866-7f0d67ea4ec5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "592954ef-d80c-49da-9690-550ae2ab2a98"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "865e47de-8605-412d-a385-d50a75799b60"
							}
						}
					],
					"id": "788a8378-5c66-40ac-94b3-c582ceba9e15",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "2c34f336-035d-4a85-bd75-f25c1b56eba6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "cf4a99bc-3992-436b-a599-9ceec6f314ce"
							}
						}
					],
					"id": "25dd739b-ad07-4064-9e72-d95850626bd6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a58ffdba-b199-46c3-b5f5-5ec6437e240f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "190d15ad-be28-4b1e-b90c-3a93d791f78d"
							}
						}
					],
					"id": "d0906d5c-9f41-45a8-925c-96500dc872b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b57fe66e-6553-4f0a-9735-3c3bfd7fbb3d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "6e28d7f1-67d8-4554-99ba-d02ecddeb78b"
							}
						}
					],
					"id": "2a4d8591-0200-43df-a646-6d92f0b3ca94",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "0791cb0d-52bf-44ec-8c44-dbbf28f43415"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e7b03805-3eab-48c2-b8c9-24965c782a93"
							}
						}
					],
					"id": "33e6e9e1-afda-441f-8250-dfda7b724089",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "bbe09cac-64ab-4ea0-8e83-436c5d7c4b2d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e2a8bf1e-92c1-4c13-aab1-bbc3ef9ca14d"
							}
						}
					],
					"id": "7fa66503-c7df-43cd-a278-138930913991",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "79e5aecd-7f90-4372-9419-dafd601e69d4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "8c894a59-c6a7-497d-8916-50eb07b4010c"
							}
						}
					],
					"id": "9cb55a96-18dd-4dbc-88b1-4e188a67efb4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "183f5c06-df53-4c4a-baa5-660c3881631b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "2ea868f4-0222-4b83-a4cc-4f4533d3142a"
							}
						}
					],
					"id": "df66d6b7-d3bb-4889-852c-c9e19aeeeaf4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "84336b7d-da1a-4508-a553-bc925460e4b1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "2a312769-7beb-4787-a157-4e50ed724ea9"
							}
						}
					],
					"id": "5cc56c5e-3eef-4fb5-ae77-b1258143ab43",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "cfcffda2-79a0-4ade-b72d-de69eb75aad7",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "30cb3458-7eea-4ff9-8f82-43fd31289917",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "99492c3a-b6c9-48cf-8657-63a71123bb19",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "9a72b92f-bdd5-4a2e-a1c9-fbb43b31ee17"
							}
						}
					],
					"id": "48680d03-3dc0-48c4-a183-a60b27f0c34d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "e7c8bc5f-a34a-4432-b196-6b4fd6873837"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "35997ea5-b1d5-4ff3-9145-eaf9303c3f88"
							}
						}
					],
					"id": "eb58ad48-b8ca-40f9-b5c5-ba363f6e3ab6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "c39b1f55-68e1-4f8e-8316-1f4e06d4ed1e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "bb2f1726-fe9c-4507-81dd-1f117e83d899"
							}
						}
					],
					"id": "ae1388b7-c7cf-451e-aa79-3b028141fd6b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "896f591e-4ec5-4912-a2ae-21f1e6d78b60"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "4265d0ca-fb2f-4ff6-b9e8-fa6ad7c5872b"
							}
						}
					],
					"id": "df070cf6-8cba-458b-a3a2-499403f8f823",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "6fb155fd-11a3-450e-8a5f-b6848495dea4",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "e2ad0a34-5015-46c5-b5c3-0f0c638fb87e",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "8193c497-b086-4a98-89f5-9ab38fe377d5",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "340d9a8c-8250-4de9-87aa-0931f06745cd"
							}
						}
					],
					"id": "24fee7a4-fea2-4527-8e4b-7e79dd176325",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "27076750-0c21-4392-9163-9d97e6aa4b80"
		},
		{
			"name": "Setup Copy 8",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "607f4525-f156-4f33-9b9e-a5d3a1822a65"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "262f153b-c8c7-4e69-b08f-ef95d92ad3aa"
							}
						}
					],
					"id": "3551a9ef-cc4a-4d38-8eb1-e861f80e4739",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "3da370aa-073a-48c2-b946-6d29343f941f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "0fbcef9a-6595-408e-8833-c8810c984ed8"
							}
						}
					],
					"id": "04e13326-e762-4efe-aeaa-1ce20381c898",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a1ccdfd6-31d4-40ec-acb0-2ea49292ca98"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d205ad12-9387-47b2-91ca-05beb37af410"
							}
						}
					],
					"id": "a442d560-7515-4fd3-a994-f9d0b9bc127b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "e79e9bd5-509b-495a-9d7c-dbf964ec6a8c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e5bfba3e-9d67-4fdd-b493-8bcb9e9462fe"
							}
						}
					],
					"id": "0d084ba1-9177-4043-b408-b1bc067aad49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3163e62a-dd3d-4896-b059-ecb6be1c4b1a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "08f285e3-c0ab-491a-a42e-3751c4486749"
							}
						}
					],
					"id": "d8e707ed-551f-4eae-ae8d-c1a82ca011ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "709b1d4f-352b-4c52-9370-431494d9390c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "19366f13-a9a2-43ef-b6dd-22445ade4fcf"
							}
						}
					],
					"id": "90ded084-e88e-4e7d-ba68-41c436cabb5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "9a0a2a20-8cdf-4f64-aa2b-eb648bbf246d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "28785991-6959-4c49-90f2-d697ef08b1d6"
							}
						}
					],
					"id": "22d3fb2c-14d8-4239-a12e-8baf9eda1cb7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "fbec3067-8bed-4591-b46e-7e285b4fa41a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b212efa2-2db4-41fd-b87e-bce89ef9b8b8"
							}
						}
					],
					"id": "f36fb728-6095-4b58-987f-f6b243e8ad81",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "03fb0954-c052-42b3-ae51-d9a0a797162f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "94969f6f-e92e-422d-8818-29c2bea0fcf1"
							}
						}
					],
					"id": "855489b9-58fb-4d99-bd07-fafdda1d0212",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "815570f1-ca2f-4ff7-86be-d75cff4bedcb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "ab1c73d2-b699-4c21-b860-39dc0de755d2"
							}
						}
					],
					"id": "8a117506-57b6-4ca3-b10d-7e354df5544e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "087f6f5e-70c9-4aa5-8ff7-13ab4cb075a4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "00af451c-56e0-4da1-8d21-dd4a2d3a27b3"
							}
						}
					],
					"id": "2126b48b-f243-432d-88f7-dbbaa5fbe5f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "096a17f6-ce01-4854-bf3c-708fbd5f566d",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "d407f527-c8ac-42d6-bb11-62b7b66f3e8d",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "e29c39ff-b841-436c-8337-e4ba97f9202f",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "383e643d-6452-447f-9cb1-87028db4b20c"
							}
						}
					],
					"id": "ea511680-1b3b-43be-9df8-bc591d4f9f56",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "b3755664-b9d4-4d67-b6fc-9a715fe1c9e8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "2285bf41-5e7a-4e10-868d-086cdc279100"
							}
						}
					],
					"id": "e710c273-b7a8-479b-9b5d-75e9c9f0f483",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "32bfd0b6-78e9-4688-b9c7-146a4f8535e4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "288de470-9537-41b5-a44c-220bc7719354"
							}
						}
					],
					"id": "75809cca-7852-4a84-8920-655bd38222cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "aaa77bf1-0f20-4859-ad68-a5c68a99fe2d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "e157b202-2338-4432-bd86-36d739fd2988"
							}
						}
					],
					"id": "673c8c06-6f29-426c-9645-4de8fd20c87c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "01063d7c-3a7f-49c1-a918-80311c16f4d2",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "9b85c0cb-47ca-4cbb-8439-903f8698edf7",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "e94756bd-4d82-4f24-ab7f-283d56fd3838",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "dae7b1be-7be0-4891-b9dd-afa7bb2ae830"
							}
						}
					],
					"id": "f06e2eae-2aa7-4c46-bf42-786e717d658d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "d547aa8b-04a9-4447-af6b-2247fb8a7916"
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1079d7af-f9d7-46a1-9d9c-1703c8396eae"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "12a30912-6fd4-43d3-a99f-556df066f793"
											}
										}
									],
									"id": "32ea70bd-6194-436b-997b-f403039c26ed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3e8c66b7-8bc9-4b06-af01-8333e07433e3"
											}
										}
									],
									"id": "aa45ca6e-4a0d-4c15-906b-4e23c75607e6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f953b17b-a88d-4405-a082-7d7a65d32917"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "02f381d1-5eab-4e56-af02-38b1ec81bffa"
											}
										}
									],
									"id": "44cb589e-102c-4173-86d5-f0024666fc9d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "fdc39566-4901-47f5-b4aa-90d8800f71bd"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b8220fc4-0129-4d15-bc0b-3e4280748e4e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "10d08c86-fb1c-40b4-8182-87681d51a38c"
											}
										}
									],
									"id": "94c96c41-6b6f-4a84-a716-d4f962fe17a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "eb1754e2-510e-4ec6-a361-a33f93780cec"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "22b58626-c1d5-4973-934c-42ec31741540"
											}
										}
									],
									"id": "0a199bca-a442-48fc-ad4e-873054134678",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "06ea0ba3-abe1-4e0b-a7d9-9d80485ed814"
											}
										}
									],
									"id": "c3387dfb-81a9-4923-a5b4-61bde8630f75",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ce817441-8d0e-40a4-806b-a13e3e82ce1b"
											}
										}
									],
									"id": "3845c320-2705-454a-b885-4c05f5ed5c16",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b82e7cb5-def9-46c9-ba8a-6e4260ba84f3"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "009f738a-174b-480c-8d7d-ecd0b6e557be"
											}
										}
									],
									"id": "6fb2f6bf-1aee-45f5-ab30-441df9bf248f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "e4a0aa5c-3434-4ff7-8807-8f6594dc5841"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "8e9a04ad-ff6d-43a2-92aa-e1360367db59"
											}
										}
									],
									"id": "ef2d5930-6618-4a70-b09b-741d78ff8e25",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "a3a72908-4bdb-4e9f-9604-de37b68fb39c"
						}
					],
					"id": "0f94b04b-74a1-479e-a80b-7a58b704e539",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "8a6f8454-e6be-45b5-ab13-1cc1d52350a7"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "8e144e5d-921f-4ec0-b05e-1d88b4f5db9a"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "e3899ab2-6461-4fc1-a9f1-9089052b04a1"
											}
										}
									],
									"id": "f84a2fc7-6ac6-4999-9a94-724c7db287b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "f4535125-397f-4c9c-a40e-9687adf2ea00"
											}
										}
									],
									"id": "f03c5c0b-7e97-46a4-9441-9efa5676d2ed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "e50ee282-5c1a-4596-a274-d8952ae72dc2"
											}
										}
									],
									"id": "2dba050a-7d6a-40a8-a0eb-3ff1b7c3e1a6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "61746dc7-f22c-4b2d-8214-72910fd8a84e"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "10af4cc1-6c66-4333-9a43-44b8f752dc58"
											}
										}
									],
									"id": "8f1f47a3-5646-41fc-be34-c3b8d9ff8033",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "9084faf8-d7ab-45fe-a16d-0a3e1135b4ac"
											}
										}
									],
									"id": "468acaa7-3036-421f-9314-ccb9f5c04c6c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "bf6c8d79-d764-48ca-9c7f-5fc4904ed000"
											}
										}
									],
									"id": "ad3c9ccd-b5a0-4c98-8f71-a9c5f5f85fb9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "3ff4b2f1-43bb-4d82-915f-16ef6ba5f633"
						}
					],
					"id": "da39d1fe-ad09-4d85-a901-5e05dc919f03"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "fa90bdcd-c1b1-44f7-ba58-7f2d1050a2c9"
													}
												}
											],
											"id": "5947244f-cce5-48d2-a679-f5215b214d09",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "ee20826a-df15-4b38-aa66-1be85d1aaeb9"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "754f26d8-a38f-4b71-9ad2-18184ea6a34f"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "c65791ce-ccf7-4aa6-8e5d-9888d7b4d32b"
													}
												}
											],
											"id": "825734e9-8d7b-4835-a93a-b02b6158aeed",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "dcd729b0-59c3-4f5c-a781-7efb5d8957fd"
													}
												}
											],
											"id": "2fffb666-c3fb-4067-928b-357067472ebc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "d3190595-538d-40c3-a74c-4dcb3dd2c351"
													}
												}
											],
											"id": "6042bf7e-9735-4b92-b11a-069376c7d4b8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "ef528a0a-29c6-4cb2-a3a9-4b9614a40dc4"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "2cc31441-ec80-40a0-a846-a40fdec2e7fe"
													}
												}
											],
											"id": "a1cda6a9-8e60-47c8-868a-682d6d9433d7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "d3e47b88-603c-4def-9669-50e6e57f7f56"
													}
												}
											],
											"id": "64bdea33-4d9a-424f-bf94-7397be86067c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "2e16940b-f8f5-4680-9d52-60bd3f8fbe21"
													}
												}
											],
											"id": "652bac50-45ff-4665-a60d-7828f0b5b4c1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "5e7d6785-6ce0-4b9f-b93a-6a4bec726fb4"
													}
												}
											],
											"id": "3636d3f0-2479-4936-9d1c-afbd270c74b4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "0300ff3b-fc99-49db-8a48-d16e0dd2cb5d"
													}
												}
											],
											"id": "d98e0544-cb76-4e1a-9c64-9295b1ad69ba",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "b1223694-0cd7-4126-9440-df8272214cde"
													}
												}
											],
											"id": "3f50a1ff-d949-4832-b5be-260daccc2619",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2ea94b7e-a48f-491b-80b3-ecde8e9ce5d1"
								}
							],
							"id": "856f342b-69a1-49a8-8fa7-8fdb2c755bd3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "e5e347f7-1724-4367-83b1-f8f9595765ac"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "762538f8-2993-47aa-8d2e-34ff24be6eae"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "80392a0f-2094-477b-b866-e4ba6564ce76"
													}
												}
											],
											"id": "5d19822a-72fc-4695-b3f9-4c484fe3f2a7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "0469343e-af18-4fbc-84d2-be1e3fd5b7a8",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "092fbd2f-046f-4d71-a088-83ba3e73a9d1"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "2ed57fad-2471-4d81-bc75-c24b1ba0e874"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "2d995fbd-1cab-4eae-a351-747affc7b7c5"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "4f30d411-c3c1-415a-94d0-dcde59ab2c05"
													}
												}
											],
											"id": "a70a9611-66dc-460a-8711-e530c9da500e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "a02c6ec7-8454-4a23-9807-e98e6718fb8a"
													}
												}
											],
											"id": "c9155c39-f7b7-4918-9aa7-5b3c007d4855",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "a1107910-d4b1-4793-896c-822ddcc33b51"
													}
												}
											],
											"id": "6e54d476-573e-4b12-a5ef-4f98dd8130dc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "ae8ae5c1-c75f-4362-aa35-0c64f933d753"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "dc5e4b26-261a-4dab-ac4a-829270f65f29"
													}
												}
											],
											"id": "cd94a41a-513a-434a-8779-4db86e802088",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "dbdd44ee-a44d-4fda-88e6-f480be75c910"
													}
												}
											],
											"id": "1e482591-9e55-4cf8-800b-41a7fdb05680",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "b89fe71f-401e-4c4d-803d-525772e4f446"
													}
												}
											],
											"id": "d84963fd-9eba-436d-9365-ed68ab048c03",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "22b96c29-a06d-4d2f-a5c5-4e213b5c7c74"
													}
												}
											],
											"id": "3315dc0f-0e86-4823-8070-2267480c81cf",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "494e29d9-013c-4f6c-aa2b-a68888f0f741"
													}
												}
											],
											"id": "13ef4e49-6d42-48c5-8af6-c5398ca66418",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "658f1420-0cd1-47ee-8cf0-286f1de312bc"
													}
												}
											],
											"id": "c24bb3d1-6067-4bd2-a86e-2bb07b3cfd7e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "0084e599-b04c-4d3e-9eb5-5b9f42f539c1"
								}
							],
							"id": "20fd87d6-6727-4f84-8989-443f14504838",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "bb93220c-f959-42b8-a660-51ee89148711"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "4a038678-acd7-4efd-9539-d656fb2118dc"
									}
								}
							]
						}
					],
					"id": "1e90897e-9e8f-4a26-93ef-170309bc11fd",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "34898dc5-94f1-4165-ab48-792c0f76d9a3"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "63eb1b1d-d4d7-420d-a31a-e0a963ba88ac"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "6ac0a831-5f6f-4493-9db2-453a99f0c266",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "73aed420-5d5d-4484-ba9a-fbe5e6b1036d"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "87258f4a-0402-4584-a09b-b3f75876c9f2"
											}
										}
									],
									"id": "d8a7d592-18b9-4445-a61d-a74e442a32c4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0c360949-6d66-4d0a-b8f2-ff3a08d4fe9f"
											}
										}
									],
									"id": "35b3c8a4-f3ee-485c-8732-7b17fc07400e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "31ad7775-d02c-4b8e-ab75-1644ef815c65"
											}
										}
									],
									"id": "72ca6bf1-cfa9-4765-bd09-8ee733b873ff",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bd86705d-3943-42ab-ab08-7f7a4dfa1437"
											}
										}
									],
									"id": "ad0f2e2a-66c9-4096-989f-3c50cee7ef35",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "729b038b-a1d3-42f2-a79c-a6d4aaf8cbe9"
											}
										}
									],
									"id": "db0b49a1-f0f6-4d27-bbf7-71719232f95a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "36635dff-5054-46eb-9d24-ac18840f7408"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "e6931a5d-6170-4147-82f1-f87e0c78e6c4"
											}
										}
									],
									"id": "b18ffb03-b48e-44e9-bd7a-32156690e627",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "ba117869-31f1-43f6-8882-00f26d42cb9e"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "24533b35-bd78-4142-a80d-dde03d687ec6"
											}
										}
									],
									"id": "6c0d971f-5e6e-471f-9e63-74facd19bff0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "51b8a2d0-de32-4379-9661-9fe709e07230"
											}
										}
									],
									"id": "f86a676b-1478-4e70-a3ff-873fc0a9b4cc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "2dfe9489-0173-45d8-b0c4-e0d84986261e"
											}
										}
									],
									"id": "87ea85f5-a849-4aeb-9c09-0dd2a58ca4cd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "066e0054-3940-4d7d-b8b1-0ccf91a2c090"
											}
										}
									],
									"id": "45a57cdf-a90b-4cb6-88b7-2f69c00aaceb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "6abf71cf-5860-4c3d-a79f-c61273526463"
											}
										}
									],
									"id": "60ab24fb-4278-4970-a82e-c599eae126a2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c34796e5-6e46-48db-91de-2f9d3f07713e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "425a1931-1d60-4df3-bf23-bf66776e45b4"
											}
										}
									],
									"id": "d4a340b8-bdc8-4ea0-8553-69a48f18d3a6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "14b203db-838d-4191-a1f0-b13e062f44ed"
											}
										}
									],
									"id": "8ab7aa25-44c5-41f9-bdb8-0f405ceca971",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1d01051f-daa2-4522-9975-4af63d524a2d"
											}
										}
									],
									"id": "65707b0d-7e99-4efe-80a8-4f9487b2d49b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "480f129d-ba7c-48eb-9b06-fedace61ed30"
											}
										}
									],
									"id": "2d8ab087-513a-4916-a036-d0df3daa6fcb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "90b295cc-a499-4346-8825-0bab04973551"
											}
										}
									],
									"id": "484d3f71-5b9d-41d5-9ea7-4f9f0a3d39c8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "f5946f51-80d6-4008-ba55-71e1db9d0b3f"
											}
										}
									],
									"id": "fcab22b5-594b-483f-b914-e57f7406ed46",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5f25b37c-ac53-4bcd-8f49-e4dad7204eb8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "f5b072c3-3ee4-492e-abd7-6cbe1400817e"
											}
										}
									],
									"id": "971c79e1-92df-45b3-82d4-ca6bc7e05142",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "3e5efbc6-0bfc-433c-9eed-4a864bb30708"
											}
										}
									],
									"id": "09fa7c1d-d2ea-47af-bb6d-ee460ddd687c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "6e295882-aba5-4b5c-8956-b87c78e226b5"
											}
										}
									],
									"id": "461aec89-af59-41e2-aa4f-f2e2fc34ad88",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3ac2da50-3f95-47cd-b6c2-d91c38420db1"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "3c1874fb-3d5c-49c1-b537-c5c28aaecebb"
											}
										}
									],
									"id": "7cd06f04-b68f-483a-bc25-c58d6683d890",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "6b746b48-96ec-41dd-9caa-df398c026c9d"
						}
					],
					"id": "aa415e28-5e85-4572-bdf5-c7a29abac172",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "b81877b4-a436-40b5-bb8a-b44d47ce96f6"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "b1ae1632-f86e-4fcd-9ffd-236a3335e369"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "20fbce4a-b77e-4b95-94ed-48297c48fffd"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "5559b704-c9b3-494e-9784-e057159810fe"
									}
								}
							],
							"id": "9f004467-a06b-46b6-9f12-aeb758800ee0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "9be2d823-405f-4077-84c5-631183879ca2",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "a2109167-0ae3-44b4-90b4-0887b069e19e",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "dc51d79b-ca33-4340-b191-fb633ec3d846",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "4113f774-a6e0-4391-b230-c01189ebffb6"
									}
								}
							],
							"id": "730319ef-4d0f-441e-88a8-189189256809",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "7402ffba-fdd4-4672-b70a-d847d6eabd8e"
									}
								}
							],
							"id": "8929bc58-dd02-4fbb-b36d-f20607e7d8d5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "63dd8f90-4748-4a8d-be26-10ca8faecd7e"
									}
								}
							],
							"id": "db506003-4277-4921-9330-f886d48b90dd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "8e9b3181-d0a3-4204-84a5-e6689553e367",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "6dab6657-c141-45cd-8e4b-11b4e7866d9b"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "db4f8af0-20a1-47fa-b8e3-65f97bca3466"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "5afd4ebc-846d-457d-ae15-0ea3fbfdfd9f"
									}
								}
							],
							"id": "c2733af7-85b4-4f3c-b8d6-faa7c4eff91e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "6fdee519-45e3-4a1b-bb8d-92c8dad5fc20"
									}
								}
							],
							"id": "37420d09-0a05-4271-aeba-56c3e7c3895b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "f3f844fb-c1db-4ba0-8d91-62ab49525747"
									}
								}
							],
							"id": "c1d45c4c-ef1c-4c5a-ab2a-1ec29ba6c8a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "c82859ad-262a-45d3-a47f-0a3d4ef6dd1b",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "d4efe624-6bd3-4965-930c-ed2fe7df66c7"
									}
								}
							],
							"id": "77ee800a-8eb0-4100-a40d-ccc88f09bc11",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "a28d410b-21d1-4240-9da8-38ac2c851a3e"
				}
			],
			"id": "83caa448-0227-4213-910c-44e99a565a34"
		},
		{
			"name": "Tests Copy",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "73e020db-6bd4-498d-b652-c75951862254"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "a8ddf82e-f317-4831-8aef-e7450188d35f"
											}
										}
									],
									"id": "445158c0-8d00-4544-b2a3-91c72c2bce8a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1b9ea529-0e60-4387-b920-3c407b05581b"
											}
										}
									],
									"id": "c14d5a90-43c1-4871-92a6-38eeb2483b39",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0b46544e-31d7-4bda-933e-0b37fd08d2f5"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "185bf244-5d46-42cb-a9eb-0a67b12b449f"
											}
										}
									],
									"id": "96da869e-92c4-4ccc-97fb-4d0d1c817b07",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "7e022a35-3c1f-45ad-ada2-41a8506d36fa"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9dd3eb4d-6509-4779-b18c-eb177fba3963"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "55ccb893-9365-44d1-8d0c-88c4c245f2b6"
											}
										}
									],
									"id": "89ac612d-12da-4621-874b-874c1ef3544b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "43a04e46-59a1-4bd7-ba3f-13e19d4a6b7e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "76c28c28-6fbd-437c-a7f7-6813103ab9cf"
											}
										}
									],
									"id": "7004d7fc-ad17-4e38-bcc9-5518fd4ebaf4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "06d7cd78-e989-4d00-a022-b53cb998d44d"
											}
										}
									],
									"id": "9c5dbba9-7512-4f7a-8e53-15f0749cb1c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e5417ddf-75ad-4a7a-ae44-0691eb23d897"
											}
										}
									],
									"id": "dc5bce28-b9c1-453f-b37e-8c3325dd1007",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "61fbf586-de8a-4180-a279-92a5969314d3"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "93f9b05e-59f1-42b8-ace8-28dc2c33415f"
											}
										}
									],
									"id": "52cf353f-da82-495e-bf88-b430da08b6c2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "33246720-682d-4037-bb49-3224a573f5cb"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "d149833a-f638-4fa5-bb2d-be968ebf0ea5"
											}
										}
									],
									"id": "bb558be2-c8d3-4c1d-ace7-1883c3872498",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "f84bf920-ab08-4872-bfa7-02aa058c5422"
						}
					],
					"id": "fbb4e784-78c6-434d-9725-c9360d5f162f",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "03241f68-760f-4462-8b2a-0a33113c593f"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "051ffc2b-2cb8-4bd5-b997-56b13ff82ee4"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "d695dd88-7788-48bf-9cdb-fd9ad3cfe507"
											}
										}
									],
									"id": "5e14a7ea-90ee-4ddb-9893-b20d1f391067",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "f7b3be03-ae31-4520-85bb-083e898933ca"
											}
										}
									],
									"id": "4a2eaff3-5ba8-4bbe-98f9-9f9a4666847c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "f3948e7b-5710-46d0-9dfc-26d70e07937a"
											}
										}
									],
									"id": "21dedcf4-ef03-4e20-9e29-8e7e49f3a6ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "e3278ce3-7acd-4276-a571-f4f23021d695"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "d1f2f619-8be2-408f-af6a-9e8e27e9e722"
											}
										}
									],
									"id": "c8494c09-39fd-4e7e-9f28-ad69da9d00ad",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "62e6b68f-c364-48d6-a6ea-34c71f054cde"
											}
										}
									],
									"id": "5aafad29-cc71-4cc3-ad0e-ee12e61b966b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "11628739-6bc9-477d-bbb5-ff11fbf69c7b"
											}
										}
									],
									"id": "e4eed756-b48c-4c0f-af0a-3233fc5cf0ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "b660b4f3-bb8e-433e-acfd-a73b082ef0f4"
						}
					],
					"id": "c9b13c8b-8b80-4ecc-966d-5b70e8a4d9ec"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "c91ce8c1-d988-4cd0-a428-05f84303fab1"
													}
												}
											],
											"id": "7528c34a-a4ed-45f4-aa4a-6538cd8476fc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "4af8ac87-2a12-4f94-90ac-6972be0da2ec"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "238cdcbd-9bc1-403a-bd26-25b95f175b86"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "6d8c6e98-655b-4691-b558-4d85ced7e1c9"
													}
												}
											],
											"id": "c49a5de6-96e1-4359-972e-7914819fbdbc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "398b47f5-a90f-4b82-ba04-585b096fce8e"
													}
												}
											],
											"id": "c03a154e-6b60-4d1d-a9e0-8bb277a4ac36",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "561c9fda-ba75-43e7-ba5b-9ff77105b68a"
													}
												}
											],
											"id": "79f4ef77-c227-4c7b-b2bb-cc57589e9c5a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "e1b00f3d-67dc-4603-84c9-784d3b202746"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "bae02e28-cba7-4bb3-8cd0-8ab0ee1c588b"
													}
												}
											],
											"id": "25106551-ed35-4fed-9196-b90d7bd8b7a7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "fd52ca65-adbe-4ab2-b804-9fe2e6eb98f5"
													}
												}
											],
											"id": "de9c779e-a44b-416e-8d52-6f5591bdc9ba",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "d0227b3b-700b-45a2-9459-a76e71cc106d"
													}
												}
											],
											"id": "8c7e9fed-b2a0-4932-8333-5a72fca9dbcb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "6669cc1f-8992-47b5-ab82-b5fc3c7bb4fe"
													}
												}
											],
											"id": "9200b2ac-1bbd-4891-96f3-e0d356e78258",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "da182c64-c153-4764-b6c5-5b6877c52a20"
													}
												}
											],
											"id": "c78723ca-570b-49a0-8280-e90019502c0b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "83ec0d5a-79e6-4cb2-a87e-ef189b27eea0"
													}
												}
											],
											"id": "f0f354e4-ae51-4afd-97b5-f99fbf61b39f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2d102acc-3b0e-4527-8355-1516e338d2ca"
								}
							],
							"id": "19e0dd4a-e688-48ec-a66f-e03f229926a0",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "4d5a74c0-032f-4c42-a446-65e6b82561ca"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "3ae54844-a403-4362-b2ce-693841851442"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "35eff53f-3e09-41b2-bf1f-035210f88021"
													}
												}
											],
											"id": "002e3246-b0ec-4fe5-8163-402c89c05a61",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "9b999518-9fe4-4d75-8386-292cfd874910",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "b6cf13c8-6eb9-4bc9-8e36-9e8da24d94e5"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "8358bf48-1884-4bdc-a0d1-703b337b0098"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "b4190cce-9a3f-4991-8724-c910e11a0d05"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "64e7b5cd-9e17-454b-a590-cca806fda797"
													}
												}
											],
											"id": "dd157dd4-1d7f-49ea-ba74-6e4976d98af8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "858751a0-32df-4f59-9c21-fbfd6f5f1007"
													}
												}
											],
											"id": "c5728495-d484-47e7-a965-0a59021e776f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "685b05d2-ccf7-4bc7-b4e1-da0bc3a59d54"
													}
												}
											],
											"id": "3b19779b-92ea-423c-9688-7b5188946a8f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "f47d507f-ebea-4910-8265-60571e9feccb"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "0e225d4e-0001-4575-acd8-694c0829e1d0"
													}
												}
											],
											"id": "52227221-9fe2-407e-bcdc-be8d093832ce",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "214ed5a8-ba30-49ee-9530-7f9079252459"
													}
												}
											],
											"id": "292d69b1-80d1-4993-afd9-8c1a698e7ec5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "9e72ddcc-f0f8-4868-80ce-fdb42522e0c1"
													}
												}
											],
											"id": "a06a7993-7e37-4a98-a518-fb2473bf56d3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "bbd5577c-518a-4cb9-92fa-5ac00a787c9e"
													}
												}
											],
											"id": "33c2c4dd-2344-465d-83cd-7be83e2ffc49",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "b0d8688b-0f44-46fb-8c1c-6c0982099477"
													}
												}
											],
											"id": "7a4e892e-755c-4f48-bc66-421a82c52811",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "d151ab2a-b231-4478-9104-e56da83aab3e"
													}
												}
											],
											"id": "b725f693-b736-42d4-87b3-f1dcab643718",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "d061006c-d9ca-4ae0-bec3-b21b54b9fcbc"
								}
							],
							"id": "8186ede7-e2ea-445f-aaa9-15948186713f",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "62b7821f-25a8-4c09-9c33-ee9129af0647"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "a0fa0e2b-4860-47c7-a5ab-bf553ad507b3"
									}
								}
							]
						}
					],
					"id": "7c3c8341-bc2f-40dd-9c39-9b9476c60ca9",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a240a2c0-13ac-4bd2-aa6f-8520ad23fa17"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "0b08c646-631a-4f8a-827d-de2cffef7b17"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "2b8ccaf8-945c-4fac-a29b-a964158d98bf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "3f0f2ce0-20f9-4a17-88d9-008b364e6799"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "05834f17-1669-40f8-a301-5817649a4ec2"
											}
										}
									],
									"id": "be0d43fa-7e8f-4d1e-8bba-c73f832a9379",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e1e24135-39fd-4201-99c6-7018eb5ad35f"
											}
										}
									],
									"id": "b4b530ab-0cbf-48cc-b7b2-f8d3bf1c0f3f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "b20f6d0e-4577-42f7-ae2f-0d663e81db3c"
											}
										}
									],
									"id": "f3f18089-f6b6-4c70-af09-565a60be95c4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2abe7357-4146-409f-a875-dd0940032834"
											}
										}
									],
									"id": "2aee89f4-1714-4f8f-9034-ba1128afa5e6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "42d05456-72a0-49db-ac9d-7c22c45a9741"
											}
										}
									],
									"id": "ae9d19c2-48bb-47bf-a4ee-f9bc9bd817fa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4c28e232-571b-42f2-930b-74d2149b0314"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "95750c68-c364-4e4f-af59-86e12f1b4698"
											}
										}
									],
									"id": "02ed667e-c9e9-49a0-a9de-313309d0a2f3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "bc2ee83d-ef16-4781-bdd9-70e4a8eb05ae"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "332b19f6-2e62-4799-8f81-5a6746964acc"
											}
										}
									],
									"id": "0a053dd1-86b7-45b7-ae26-d67187e0b2f0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "23265eb2-79a6-49f2-b8b4-ede3bc27bd0c"
											}
										}
									],
									"id": "f011bb15-c4ca-4fb5-b61a-c9aeed1ba9ce",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "277db43c-a089-4012-9e7e-bccdfbffd8a8"
											}
										}
									],
									"id": "60297aee-15d0-42ef-9b5a-98c8df3b5672",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ecd6a076-40aa-4422-93da-394d34958756"
											}
										}
									],
									"id": "3e280830-8fad-4277-8663-7d90e1432c76",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "88388915-efae-40a0-aabc-a48a7aaa5e14"
											}
										}
									],
									"id": "81edcdd5-8558-4427-8bca-27ff1385d505",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1804f0c5-7ed0-4ba2-a849-78cf6a55c32e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "ba534bb7-d873-485f-859e-0ec5a254c6ff"
											}
										}
									],
									"id": "402c0e8e-1674-44bf-b5a2-4d3fdb00dfd1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ed55f9a2-cb26-4cc1-a578-f35b89a0a20c"
											}
										}
									],
									"id": "47b106e3-87e7-43d1-9908-996e8f691b00",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ce538386-94fc-4d5b-9bd4-de0259937f0b"
											}
										}
									],
									"id": "ca5c0dfb-7942-4255-9d6e-2eb3347af45b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "3a55cd24-243e-4a0b-a62f-c4f09a29c1c2"
											}
										}
									],
									"id": "205afd63-cdd7-4cb5-ac9f-c01a27839e07",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cc50216b-0c95-4f73-8ba4-9ded252fc872"
											}
										}
									],
									"id": "68437f69-2d5f-42c2-8aae-15ee46398160",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "a0b24c78-557b-413c-84c2-081472ba3819"
											}
										}
									],
									"id": "56a8760f-f807-4b39-93fd-a472da84066c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a8269dac-84e5-4262-8483-17cda82a5058"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "f4c2bedf-8dbf-4c9d-b123-efb1e020bdb3"
											}
										}
									],
									"id": "47a1c4c5-63be-4504-a4be-570f512434fe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "71044af1-9d43-49c0-8585-b1e96dbca627"
											}
										}
									],
									"id": "e8b984c5-05f4-479a-a74c-065da942e9b2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "5ff9c21a-56fa-4a50-930e-60c9e5097638"
											}
										}
									],
									"id": "ec1a003c-b869-4009-8c01-52f777996593",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "be7d610a-6d37-46c5-b2f4-9efce3519519"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "8c58abc7-cda8-4aa6-88bf-95888120923b"
											}
										}
									],
									"id": "ee0fdd93-4806-4c58-a7d3-a13d0ca36723",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "cfae172e-a182-474d-9aaa-9727323340e0"
						}
					],
					"id": "7d6335f2-0f0c-4570-8733-b1d737b2cc32",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "7a7ecf09-1348-4ebb-91a8-2b26f337f8ff"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "4a589fc0-740f-4c67-96d5-bdedf99ebe5e"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "c501b23a-6dc4-4560-a718-35952bd5edba"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "807ab8e9-d38e-47d9-ae9c-db9b496bfa53"
									}
								}
							],
							"id": "5f4af70a-78be-4a35-83c0-629753b7cf6e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "c7ef35d4-b0ac-48e5-8ba7-4df3161842c1",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "77767664-cc95-44e7-93c4-86bd7dc48f57",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "5e4ade06-5b3d-4b4f-8828-231fd2a3b4d8",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "f242ac50-569a-4fea-b259-5e26d5e94145"
									}
								}
							],
							"id": "1e6fbdaa-3f46-4bce-bf67-85c4c677b086",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "f51dcf2b-f24d-4418-a475-49f9fc06856d"
									}
								}
							],
							"id": "12240d24-e1af-4a34-a072-93eb31662bd2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "a4922cce-c4e4-4a7b-97f1-da873c9a3b23"
									}
								}
							],
							"id": "f8c77c7e-9199-4704-85c2-1c3c6257cbdf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "f19c3662-7e86-4411-93bd-415758c3d2c7",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "cff9e9f6-70a2-4d1f-8c07-787ae2745538"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "3593a836-d42f-4c9c-9a54-7bd70dcaf4ef"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "5aa4383d-634b-4a2d-911a-0a4c09c8ec46"
									}
								}
							],
							"id": "9f7a30ae-58f1-4eea-9adc-3b3ee1060221",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "1f0d2763-e926-4ccb-ba63-2cb9c03cf96d"
									}
								}
							],
							"id": "22919227-ecb5-493e-9303-ed773ddac895",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "768ef2bd-6542-470f-9d16-e58568ceb3aa"
									}
								}
							],
							"id": "b099bd3f-f302-447c-ae74-73c4c79ee7b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "262ed94c-4861-4379-b90a-65700c3ca7d9",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "d3896b40-be5c-4e47-8b53-7ff72ab80cf7"
									}
								}
							],
							"id": "f5df8694-ca02-495f-a503-09f1d4cef4f7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "cf52665b-3825-42ea-9e2d-715977be80a0"
				}
			],
			"id": "88be3899-b91e-4d7a-b7af-5a48e5e3aa09"
		},
		{
			"name": "Tests Copy 2",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "7d62ebe0-d506-4391-94d1-ad9b8fcbea2f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "488d4192-1cb8-4f4f-b43d-76deb8354bed"
											}
										}
									],
									"id": "2114c604-739c-40ce-ad7e-1b844bf9c285",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "051ce934-d666-4da0-a4de-67ca260c258f"
											}
										}
									],
									"id": "4541439a-99a6-432d-86c7-72be463c8204",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f5fe55b4-66b0-421c-b556-f3dd1975ee81"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "085a99f5-b3f2-4843-aef5-44c8057f07c4"
											}
										}
									],
									"id": "3b1446a7-a6b1-478a-a46a-5c3a0f4fe417",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "ef29e30c-5505-460e-bbc5-81364b67672b"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4b720a6f-41a9-410f-85a2-19f3005ea240"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "27e684df-063c-40c0-815c-78003f2c4c09"
											}
										}
									],
									"id": "c8c5aabd-ecc0-48f4-b248-7ca6869119e0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1e20d16d-46a5-4726-b7a4-82f745ba4516"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "1156fbbd-0a17-4858-8511-a3686acfe42b"
											}
										}
									],
									"id": "f7086862-3690-4853-96c1-f07381fd4f63",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bab536c5-1bfb-4964-8243-c205a0bddfef"
											}
										}
									],
									"id": "a754ff97-cf16-435e-9139-a6f4764a37c1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c85b63de-8155-4470-abeb-5e573b720366"
											}
										}
									],
									"id": "b9e20401-2147-4a75-8c76-66720d932960",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bfafe002-4df8-409f-870f-1debfe04cfb9"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "d628f449-a3b9-47e7-94e6-ca6720bb2d8e"
											}
										}
									],
									"id": "517c58d4-f830-4496-a856-69889e924084",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "3b211c48-f3b6-432c-9323-0e445090e101"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "dda1f775-0495-423e-8a88-643608a3d036"
											}
										}
									],
									"id": "493995be-96f4-4719-ad19-844b95fb4236",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "a6765d31-da14-4ecd-952b-e6b94594ee00"
						}
					],
					"id": "7fbd6b35-0f8c-4062-bf43-48509ff38b74",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "bb2e16ab-a995-4b8d-b6db-110a5e1db3d4"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "78c3db4c-914c-45f9-9ae8-25cb1f3b0cf0"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "b5732de4-d2fa-4f3e-8a10-7898f04cec4b"
											}
										}
									],
									"id": "c7bff321-e1a8-4492-87de-f3526e5fb2ee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "d14ff977-9381-4c55-807d-ed4a99d923c7"
											}
										}
									],
									"id": "700603f2-43b3-4bc9-a2d0-71caa9d9648f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "2bb44b34-0b53-4e8f-afbc-fe7f88407ce2"
											}
										}
									],
									"id": "4891da60-e007-4112-b373-9770be341474",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "cdc21b3a-1fc6-4d4a-afc2-a9f10c1621f2"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "5bd2e20e-a4bf-44b5-adc1-f285b9eb36d1"
											}
										}
									],
									"id": "91f49734-fb10-4d69-9320-f851f2336284",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "c2ba406d-3072-4d24-8a17-c60724113da1"
											}
										}
									],
									"id": "9e875276-8ec3-4dcd-9556-a7788b68e127",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "ff38a3cf-8eed-47f6-848f-e3886eb8bcf2"
											}
										}
									],
									"id": "946d5c4f-6ba8-413e-90bd-d2d5873a3d14",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "df79f76b-47f0-4e96-a156-2fdfa52538c0"
						}
					],
					"id": "7a3642e7-b4e8-4ee2-8d7f-d787bc1fe319"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "62804b2d-99f6-4694-a6d1-0347766ca940"
													}
												}
											],
											"id": "78e7d5a2-6d2b-400d-bf73-52bff1e370bf",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "c6e92f59-1a9d-435e-a619-43b472a4d63f"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "540f6550-81a2-453f-b327-e4551c54fa64"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "8159af43-d52c-4de0-8a78-2c6574c630fd"
													}
												}
											],
											"id": "b6d2da33-ac3d-48a4-8107-1d4806f2a03b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "e2f07d27-381c-4cc9-8023-a02ca82ee7a3"
													}
												}
											],
											"id": "95cc23eb-d0f3-470c-a1ad-fc6d341e2dd2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "873ac237-e22e-43ca-abfd-dbe292a7f6fd"
													}
												}
											],
											"id": "71193de9-e9ca-4757-9f7f-0c523b9c37b4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "289159ad-f125-4996-b7bb-c0085a3b3f45"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "3106e5a8-bd3c-411d-a2d3-0c7cea2d61d2"
													}
												}
											],
											"id": "9a9de574-c4d0-4bd6-ab36-f4714dcfb274",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "9a856d46-c63c-40ed-b21d-5f561614bc54"
													}
												}
											],
											"id": "9eb4db04-bfca-4c12-81b4-9e91ffb4c46f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "d78e6f86-dd39-4446-b747-857ee709c48c"
													}
												}
											],
											"id": "f872a712-0159-49c8-a823-6303967e82a9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "5817a96b-ea4a-47dd-8e7e-1b8f7b69e6f3"
													}
												}
											],
											"id": "d3c04a8a-3891-40e0-85ed-df778c297d15",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "da688a81-46e1-4d1f-8884-f2a88b32f116"
													}
												}
											],
											"id": "9caa52b9-524c-4083-9a3a-04a72f91f965",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "6ce1c5a5-f41b-4409-ab3d-b55c8ebc71ef"
													}
												}
											],
											"id": "1ec45a75-8c9d-453b-b09e-c4b74bef91f6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "85bfa4e9-4b8f-4f05-b239-9fd20d8a9db0"
								}
							],
							"id": "25f7d020-1a0a-4da7-b7d6-d1d70262ff38",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8b83da4e-8901-4fbd-9a7e-f1e7f0101328"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "05a36f9a-2ca8-44d0-9afb-e1a7067298eb"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "86d991e9-5380-4bdb-a1ca-66c594795ffe"
													}
												}
											],
											"id": "51ef3c3b-a8c0-4336-be8c-32cd4a1b44e6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "46f23549-bf0a-42db-91ad-42e0d4dc7118",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "f582d593-0186-4157-aad4-d0ee83d9e727"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "13374b71-481f-4cf5-8273-66026de4f6c7"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "947535ea-7570-48b3-803c-867aeefe5213"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "9dfda1bb-5447-4a5a-aca6-930e0ea129e8"
													}
												}
											],
											"id": "614c7a6f-e856-4b9d-9e56-bff8f6ee2b3d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "dd6a12b3-a8d3-4e62-882b-48a4dcda080e"
													}
												}
											],
											"id": "031d1c1d-20b9-40af-bff3-add2e40bcb86",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "1a86c91f-b42f-49dc-b7b8-9aac7cde85d3"
													}
												}
											],
											"id": "7e2a3469-8fb1-46db-a961-f264949c6270",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "f95f6ad2-e0dd-41ae-8760-2ecf99216d73"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "c03e4578-4b00-4975-952f-9ea3b809dd42"
													}
												}
											],
											"id": "ab523064-1cba-48a6-b3c1-b8d4d0e949d4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "a0a03576-7b89-48d1-aee9-2c4a257609b4"
													}
												}
											],
											"id": "6e92e30c-ca46-43f3-b476-3925b040eb27",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "afa27b68-72b3-489b-9285-981386727838"
													}
												}
											],
											"id": "49a2c5a1-36cd-484f-af3c-647cc1a7b97a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1a014756-934e-4dfa-af1a-44fd53483e9a"
													}
												}
											],
											"id": "e7a5c627-5f71-4587-9c11-0ab9c6d0d407",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "22eb8792-40b4-4781-a7ea-ad4a6fc42b27"
													}
												}
											],
											"id": "d83d24b1-2891-44c3-a664-dcaf4ba2a404",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "cc46525d-324d-4ab7-95a4-38f7381f520a"
													}
												}
											],
											"id": "cf11a441-5405-420f-b827-a0dc6e89b5c4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "d85f6370-dc55-4686-ad21-816d9afd54b0"
								}
							],
							"id": "6af006dc-6b5c-4b05-9647-cb72c70039d2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "9b453a2a-7406-4f3a-8df5-e62276a30215"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "ec07b929-5a00-418b-85c5-a377b1938d27"
									}
								}
							]
						}
					],
					"id": "6bb3e8ae-5fca-428f-8f9e-fbc795f053fb",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "10604216-b633-4844-a26b-bcb25d17a490"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a4789269-e67a-4513-9328-65ee7feb3ed1"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "af762210-723b-4877-9da7-ad1829623e84",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "16d595df-53cb-4791-9238-8d9a0e5e5677"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1301379e-3337-4d78-9442-0ff2ecb5756f"
											}
										}
									],
									"id": "9ae58e11-4c72-4424-a43d-5742aed3833a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cc14c40e-f7a8-4d25-9d83-359bfb5bdd0a"
											}
										}
									],
									"id": "06e0e0c9-074d-4d32-87d6-819487c6ccaa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "ba5a0c8b-74bd-4e68-aa69-07775d2a7a50"
											}
										}
									],
									"id": "c601772a-5ed2-4d99-87c6-f78f69c26f8d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "252a3951-d836-44ba-85bd-707bffa33d80"
											}
										}
									],
									"id": "395311f1-8ae9-4a4a-9cf1-67a7a524da31",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "434632b1-0381-42de-991d-b53820f8fdec"
											}
										}
									],
									"id": "400ce609-c6da-4046-b541-a7e8d678b089",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "beef79fd-d558-472c-af8d-b6f6b14cc775"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "05dee8e1-d248-42d4-9c40-bb268bcb0d12"
											}
										}
									],
									"id": "2966d6cc-1335-416d-b910-8f5ea5d0480d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "89cdf49a-22a7-4276-b532-9fc7902298b9"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "f864cebc-4693-419b-a076-70a27fc9c4e9"
											}
										}
									],
									"id": "8f675754-0083-46c5-b3a6-c04c485b931d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "7ee6e677-23a8-4734-a329-23464f2ccff6"
											}
										}
									],
									"id": "71da0c3b-9b5a-452d-a9e1-4aea2d1bb5ff",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "48baf2e5-095f-4812-b703-a5ebcb7986b1"
											}
										}
									],
									"id": "63a055d7-a0c9-45ca-838d-d3d79f25f702",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e06b8ee9-efdb-4e77-a9ae-c0118f0cc007"
											}
										}
									],
									"id": "54470bc9-31c1-45db-8fec-557020f4c24d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "5dfa1949-09e0-4947-a160-f384981ee40b"
											}
										}
									],
									"id": "04b89ca4-ccb2-4c33-9c1b-b00f26dc75d3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "83fdc037-d848-41a5-82bb-06bf55ba35e5"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "bb2063bc-937a-4777-a26c-eeb4ec4373d7"
											}
										}
									],
									"id": "55926fda-4cff-4c91-8941-0f13a56d4918",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "150883f1-8521-4b08-a2d5-3572734b456b"
											}
										}
									],
									"id": "f7d0eceb-3dc8-44f3-9151-9f51ec4cb80c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a135fd33-c586-4d01-95f6-aac5e987ea2d"
											}
										}
									],
									"id": "2f8a6145-0940-402b-8b1e-369549fa6d02",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "ab94f58a-bda4-4be8-b743-ac2bf480aa30"
											}
										}
									],
									"id": "5b553af3-578a-4dbc-95d6-7da2be366c25",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a84b7d35-4d49-4709-a8fc-94f8221d4114"
											}
										}
									],
									"id": "b2970c57-3b18-4fd2-b431-39767cd1244a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "095ba8e2-0244-4a94-9907-fec63d0d7638"
											}
										}
									],
									"id": "77bc4413-2c6c-4e20-bc8c-2661903b5fc8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4cf2bf1f-c42b-44bd-8feb-bfcffdcfed26"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "90d79a38-f441-42e4-9193-e715e90a6dd2"
											}
										}
									],
									"id": "e47580d3-4229-45b4-bd02-cf4ed283c642",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "7042781a-e641-401a-9e35-9412af2de356"
											}
										}
									],
									"id": "96eedf13-446a-442e-9034-a2b585c6773a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "86d775d1-c848-40b3-8971-47e271ed8d92"
											}
										}
									],
									"id": "54fd61d8-4af8-4c9e-8fc6-96e8dbb63749",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f6b12c2b-ddfe-4177-961f-1a14548ca3ed"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "b03aec13-580e-4a5e-a4f3-eacb651ffe57"
											}
										}
									],
									"id": "e5ff8efb-c415-4a79-b3fe-5212042ccaab",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "eac851ea-75a1-4fa0-9508-308a3a3aa9ea"
						}
					],
					"id": "f9fcd0fb-af71-43ca-a4b5-9d9d5bc00c0e",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3e48e142-dd79-4ae8-8f9d-08cfbd2ecea6"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "f5765afc-c460-4cd1-9e77-7fe41ba50ef3"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "73491333-a474-4819-a629-0c144e9e8aa7"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "81992741-52c6-4ec4-b841-b56134ef9b3f"
									}
								}
							],
							"id": "763808e6-ed3f-4bac-9682-690bd0f3194d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "aedb0a1e-c420-45a5-8ef3-a1d72df92611",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "bde12137-1219-4aeb-8498-c2dab8549b44",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "b51e7f30-b413-4f87-ad57-69436b2f7e59",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "1cfa7cea-ab5d-415d-b1c0-05792bd87a05"
									}
								}
							],
							"id": "7f6d134d-3eb4-47a7-9fa4-9485ccdc10dc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "d437555c-ebf4-44cf-ae6b-7eafbf08e38c"
									}
								}
							],
							"id": "45b3849c-da8a-40bf-82c6-7da05a8e800d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "449ecd14-4fbc-4d8a-a0df-58cd833b5cd4"
									}
								}
							],
							"id": "ff1d1065-85c5-4ec7-9f83-c4f527798f0b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "77089d9a-42b4-45c1-b2f2-a9b869d274a1",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "4b9fdece-615f-4abc-bb35-1e953dd53b0b"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "9249f3c2-e6b5-47d9-a4c7-8a358294b756"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "aac1b366-a632-4d00-9eac-26b393b4377f"
									}
								}
							],
							"id": "d17f4add-e5dd-41ff-89f1-e0d084585188",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "09510895-227c-478e-abd4-ad4046009659"
									}
								}
							],
							"id": "f4930e1e-8c99-4877-bb1d-6c5c8987f510",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "bac7ee42-cb11-46be-8d4d-9fb973bad16d"
									}
								}
							],
							"id": "3caab432-cd29-4d0a-9574-2d5a2db0df0f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "3d1ef283-a904-4fc4-b0a6-add53eab516f",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "310a6133-c992-4163-b931-927d6e62f210"
									}
								}
							],
							"id": "90d6a70f-ef0d-4b41-9eb4-b9706e56a0c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "6a50fd8d-23b8-4ce9-ba11-06e245823b40"
				}
			],
			"id": "aea55652-3d16-422a-9ba2-faaefe6b253e"
		},
		{
			"name": "Tests Copy 3",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9f58dc8b-a050-4119-893c-a6315bed4271"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "cf22026d-4ca2-4dcc-b36c-463e0860a7b3"
											}
										}
									],
									"id": "51a3d6fa-bbd5-471f-89f3-a3e0d0e77eaf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e8bc9ba0-3a42-4f6d-8e82-dcb8afd688ec"
											}
										}
									],
									"id": "cbf361f9-d6d9-49b6-b02e-8b3bd01b4f34",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "fd5ef2ec-f9e4-482b-b912-c456b6672a76"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "02a3fa5e-68ba-4c85-b10f-7973bd776432"
											}
										}
									],
									"id": "068270fc-88be-4500-a410-00f55a969f1a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "30783294-dcc2-40b9-a8b8-1106d1cba802"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "17224ab6-b4b5-4300-a6f3-9f60fc297031"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "d10cabe5-cddb-4d5e-b03d-518aa3f373d1"
											}
										}
									],
									"id": "a5df3ae8-fa40-46e0-9e5b-29f8f94c838e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d2901664-c59c-4a58-8a5c-7f831f689e23"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "4d345b97-7f69-4fbe-bea6-a7a8261771ce"
											}
										}
									],
									"id": "a538af2e-1b6d-4a1f-95bc-3e63d0e6da72",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9743fba4-dfd5-4f43-b3f3-dce2b2870329"
											}
										}
									],
									"id": "aae029f5-6a7c-4802-a1a9-a967c4a1ea16",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c8fc123c-1637-4215-8f9a-8606d2c559aa"
											}
										}
									],
									"id": "1316becb-8ca2-4855-ac1d-32eb3e15bafa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a93cd551-9699-4753-9180-ebd6c5e407be"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "5db58c42-fbfd-4b10-a6ef-f70569f1f402"
											}
										}
									],
									"id": "9415cc99-4ae2-42b8-968c-59aa847a6251",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "cd546b8e-0795-4c53-b564-5dce7a5f0941"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "32e348a7-93ae-4aba-bfd2-5671a753a967"
											}
										}
									],
									"id": "57bc35f0-ed49-459c-a1cc-6f37454850f3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "085d7c09-7481-4fac-bd96-ab2a977b37dc"
						}
					],
					"id": "39ea33a1-297b-492b-b291-f36b2f7ae183",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "5c4bb23d-408e-4dac-9b26-1bff7732ce34"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "ce760cdc-4479-4437-8788-54d6d7ce7046"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "91c941a3-9c26-46a2-af19-419ef0b83954"
											}
										}
									],
									"id": "31c7fa00-e430-4bcf-b9fd-a9355097de68",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "dca71a92-06a5-4745-9ae1-f7d0320ab8e1"
											}
										}
									],
									"id": "a0cc5645-2ebb-4046-864c-380661d4771c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "b5715690-ae31-4ccc-9cb1-605f816017b4"
											}
										}
									],
									"id": "4e1beaa8-b0c1-402a-a1ca-5d5a40066bba",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "3553066b-f20a-42d1-b9ee-517ee6ce3435"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "5f242273-79dd-42cc-93e5-18b7ce9eb37b"
											}
										}
									],
									"id": "c3751a3f-c509-4b71-a175-6c1112bf1f28",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "4f89d494-b494-4957-bc3d-cc17bf27f4e1"
											}
										}
									],
									"id": "d0e61bce-92f3-486b-b465-c17b4e93be23",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "7edb2e19-445e-4c01-b630-fb045a168ef2"
											}
										}
									],
									"id": "210c6a8c-a93e-4404-9fcc-af948a14f015",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "c44d997a-8113-4e62-896c-1195a18a3e67"
						}
					],
					"id": "059ea5fb-bad3-40d2-9b6d-5b29a8ec3591"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "35f2e375-bc25-4b54-a4c2-d8a50121d0ca"
													}
												}
											],
											"id": "a57ec1c8-f337-48a0-a842-461a6428700c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "07bf1790-bceb-46c2-b256-17dd7a93f495"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "38f34a60-c37c-4390-bfbc-15b43c7e998a"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "d517298c-85b0-4ea2-9ae8-cda4e9116d49"
													}
												}
											],
											"id": "7e0ebb70-e022-4d04-9d80-68c379e0cc22",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "1ff83094-e519-4ea4-948d-11da6faa2f37"
													}
												}
											],
											"id": "a77c0fb7-3136-4c83-bef1-119c287b8de2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "6881d4fe-0909-4cc7-95e1-e16d1ddd9640"
													}
												}
											],
											"id": "0d1aa617-97f0-4506-8c5b-0e212e0b8223",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2c1629c1-57ec-4b2a-8e80-f3a9356b67e6"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "74997d62-14d0-4099-a2b0-3da1fde57559"
													}
												}
											],
											"id": "8c78a44e-c75d-42f7-aa04-84081ad9d201",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "38b9bb59-e19f-44f6-9807-c0989da07396"
													}
												}
											],
											"id": "48092c0a-7fbe-41b2-8616-7a4262c28d0f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "ed2c86f3-a1a2-4b2e-8ac9-c9e0e054303e"
													}
												}
											],
											"id": "f148b84e-094e-42f0-b68d-7d607bf34aeb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "59575850-5a08-412b-8ec0-0992473eabe1"
													}
												}
											],
											"id": "55c9cde1-4441-4907-83b7-ce8e10d1925d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "c7e9f4a0-0d5b-4f6b-a71d-3368be622312"
													}
												}
											],
											"id": "2d85d13b-d5c9-449c-9af8-d3a1b1b8a041",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "ce2bcc70-075f-4e87-a527-88b765d8c2d5"
													}
												}
											],
											"id": "173d20e1-2b4e-4aba-92bd-2864a7ffd9de",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "0cba05fb-4fca-4117-8c2c-f0e004605094"
								}
							],
							"id": "16daf9b1-8586-451e-a874-5139693130a9",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "b276a28e-08d9-4a26-9b9c-e34130c47f14"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5c067a11-e2ec-4cf8-9c95-36085688d97e"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "4fe782e3-8de8-4cd2-8b3d-bc9dce424b84"
													}
												}
											],
											"id": "cb81ab60-0eaf-438a-bc54-74f53ccd7dc8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "8f963551-05d3-4ce5-8db9-e91d2d23f1f9",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "7a9a4728-0e13-4d6a-ba38-34bfa18239df"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "3b9cace3-e4a6-4c0b-986a-5cc36a0f84a3"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "8e52ba39-728b-4f28-8fb7-df4c34b63946"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "ebdfc4ca-d092-42d9-94cf-b251320d100b"
													}
												}
											],
											"id": "fb4893f3-efb9-4985-9323-3d1b4b832976",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "7e79824c-f51d-475d-911a-9bde5064f0db"
													}
												}
											],
											"id": "86531dba-b110-4bac-9b6a-3f9e299cfe96",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "fa456843-4216-4c31-abaa-079409c38988"
													}
												}
											],
											"id": "d68f72c5-f75f-4187-9e55-c0fc4812b111",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "910846e4-adc0-4293-afe0-b2af5a4af28d"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "07b2cc3e-ff13-4258-9297-51ecd1dce7c3"
													}
												}
											],
											"id": "2d9fec5d-3d3a-4dd5-bc08-cfe76f1a7e16",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "76b12357-9b36-4dc5-b857-bb5d3e32e034"
													}
												}
											],
											"id": "aa40f829-4195-4fa7-be43-2a6181b51423",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "54e4ac9f-5208-4bb6-bfd6-362dd277441b"
													}
												}
											],
											"id": "2ab0e22c-4bd6-479c-a06c-4b7891ff5b69",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "5ff58f29-13fc-460d-847d-fec4ab974c7f"
													}
												}
											],
											"id": "fd765857-6683-4ce9-bc25-ee7014a467a5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "4e14f169-81f7-40b3-bf5d-6e1c0490fe95"
													}
												}
											],
											"id": "e4bce1da-600e-4513-bd8f-a0bb3f75a9b7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "16ae19f3-a69f-43dc-ad6e-a65dd3b44a94"
													}
												}
											],
											"id": "ff91467a-0990-4443-b3ab-c4adb73e5006",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "173b8378-9f7f-4c1d-b1e5-facce375ef8e"
								}
							],
							"id": "6874a6db-733e-460c-86cf-e1371969bd97",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "361dbb8c-f493-40fb-8fe1-c5e80a69ab6f"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "abbfd9e7-7cb6-4e56-aed6-6f1c2e7a7a5b"
									}
								}
							]
						}
					],
					"id": "972f4c05-0b34-4d75-bcd0-f483c8d4c31e",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "19b5ac1c-5241-457b-8f93-fb20b5aa775d"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3a284738-ca77-4bfc-9dda-bb45da147b61"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "36290017-1654-4bfe-8288-583c45f3b1e3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "a6abdd2b-a883-4ea7-89af-3a00e51c656a"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3645d7ed-e71a-443e-8360-f77dd2893856"
											}
										}
									],
									"id": "783d8016-4401-4802-8249-35155697aff5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b1f4e0b3-2e94-4cfb-be6b-d0b071abb5f5"
											}
										}
									],
									"id": "9ded1a2a-bec7-4edc-9301-0b8427252b41",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "3f474b8e-4367-48a8-9993-1fd6894af73d"
											}
										}
									],
									"id": "cf31db27-35d0-4d4c-a007-832daf64f796",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ace4531d-8999-4c65-8f26-4ab00057589b"
											}
										}
									],
									"id": "f4867873-93bf-4cad-943d-52dcee8992b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "d333a8a9-b098-4260-bd2e-6dcf6cde0178"
											}
										}
									],
									"id": "ec61d2c9-7465-4bb7-8db9-48e4d748bce4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a7dbe7c8-e1ea-4020-95bb-624db2542d2e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "b885a06b-0446-4c2c-8a60-429165e48b83"
											}
										}
									],
									"id": "df130d62-d0ca-4a08-a58c-7bc2ddc0dae3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "2b129e56-b228-4358-9bfe-8cc3129fa29f"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "9c7d7f04-142e-4f4e-b625-42a9343ca617"
											}
										}
									],
									"id": "71f30ede-8386-428b-9fc6-9ee398bcd07a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a8bafeff-3d08-48e7-9b48-0fbe8c02f08f"
											}
										}
									],
									"id": "76a89921-5e07-4cfc-bfce-b73859b26c7d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "547884d9-a53d-4308-9215-fe1ec7d808c6"
											}
										}
									],
									"id": "db5c2286-dfb6-415a-904d-2d6b1e363c44",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "45269cdb-5699-4451-ba1e-0fd925f90cc5"
											}
										}
									],
									"id": "7b8a2e9a-4f77-4ddf-904f-eb3d1dea140e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "0493aed6-1150-46f4-85f6-4e9deb9e3274"
											}
										}
									],
									"id": "95317507-757a-4bcd-8a67-8cbda700d56b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0f340051-3169-4b11-b602-b0fb897adc10"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "753a6f55-4335-469c-8b6d-e30eeac2ff38"
											}
										}
									],
									"id": "a596cef1-53e3-46c4-b7e6-53935e50524f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "67ea0d53-bf59-4171-90b9-65e59a8a8f48"
											}
										}
									],
									"id": "760e0ed0-d74e-4dae-939c-075cb255c436",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0f438884-d6eb-46a8-b98b-f8fad5d0ec6c"
											}
										}
									],
									"id": "cdaf3757-c868-4f73-b339-fb9e70176006",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "65f1558d-3565-45fb-ac32-bdea57f98220"
											}
										}
									],
									"id": "1426f714-a876-455d-9961-453b9712c20c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5211ff9a-f90f-4c21-ae42-bb957d237447"
											}
										}
									],
									"id": "5e82cb90-547c-4454-abb1-353348ce939d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "1386a1f2-ca36-46be-9116-54902959f689"
											}
										}
									],
									"id": "2f06330a-5a7e-404e-9eb4-0216c2734e8a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "76649871-7fc6-427b-91a9-8b8e87dbfba7"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "8031e4f4-f8f0-48cd-833d-145edce27c70"
											}
										}
									],
									"id": "417338fd-f379-4788-b35b-d156de2c2df2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "3e28d227-6fa5-40b4-ab8c-b9eacb595e16"
											}
										}
									],
									"id": "3e8cf2ae-12f6-461a-87a1-8c2427df6bf3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "73fab5d9-6929-4233-9569-48540a32e318"
											}
										}
									],
									"id": "652cec13-42ea-4897-b10d-b93c3c93be04",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3de24b96-a45d-4ebf-b66d-94432d1ba69e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "e6c37527-c5ff-4862-b4d7-a49ae9d49f76"
											}
										}
									],
									"id": "283ec477-bf40-48a4-8c2d-a9733d8d8303",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "04496bc4-76f6-40a5-ab75-e5a11570aaa4"
						}
					],
					"id": "9d3196e4-9ed6-41dd-9caa-926ce58e786d",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "5bd9fa79-eebe-4325-970d-5edc2a625898"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "467d6cc5-c8fc-416f-b655-8a47aa5aef4a"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "22d7b84f-4fe3-4af0-9bcb-71feab2cd95f"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "a3b49d2e-896a-4018-b875-fd93971e2373"
									}
								}
							],
							"id": "fbb32179-d417-452b-87b3-15bfe06d56ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "887f3d7d-1b2e-4264-820a-f51ac7aa7560",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "df7791e3-7eae-42c9-aa5b-0b67072f68b3",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "4ce7d9cf-085c-48ff-a22c-ecf947ce42ea",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "22c48aed-ddb9-4e26-acda-0edbb629c687"
									}
								}
							],
							"id": "ac6dcc31-5e67-4a6b-a42f-3c79a84acb76",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "57400bb5-bb4c-43c6-b0ca-e9525eb78edd"
									}
								}
							],
							"id": "8740d676-1ac3-4bdc-a474-414b6dc9bcc0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "09d8aed6-f197-4b2e-950f-7b1f55b70c8d"
									}
								}
							],
							"id": "02f4b7dc-a587-4a66-8e07-1c104621f070",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "b48aadea-68a5-488f-9684-948ccff31693",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "f8924661-7137-456c-bcd0-719ac9fb6f9a"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "ee1aa491-2868-47c5-8aa1-b6024714fa35"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "e0dccb48-d6c6-4d7b-85b4-e1851faeefde"
									}
								}
							],
							"id": "4cf94998-15c9-4fdd-b22b-cedda15e1ac3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "1440e091-8799-4673-a14c-a730d23ac67f"
									}
								}
							],
							"id": "bc09aec4-c765-445b-966b-5c149ced08a6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "854bef93-3ffb-404d-a230-f146228cffef"
									}
								}
							],
							"id": "3cba114d-2b88-471c-b1f8-95cc88c3ae9f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "3bd652e3-ee48-4c33-b087-66573bd57f71",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "51536bb4-64a9-42d7-81b3-227ef44b7663"
									}
								}
							],
							"id": "df87b889-4ed3-4870-97cb-01f95538351c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "6cded65c-dee0-47d5-9470-01a0eb16bd18"
				}
			],
			"id": "c110bdaa-6360-4f41-aae9-0d48526e2109"
		},
		{
			"name": "Tests Copy 4",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d674c56f-128a-4d59-a224-09f2f51302bd"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "71b0e071-db27-4a85-baf1-439caac89f19"
											}
										}
									],
									"id": "d55eb51a-2128-49fe-ad6c-75e719fb684e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8a498304-8cc9-474e-8e4c-4488a303af0a"
											}
										}
									],
									"id": "4a631ceb-5a6f-4799-b057-f16f59f07a8a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cca274c3-6e45-45cc-b971-48c84699eeb8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "229f0a2c-fb67-44ae-b0c7-4fa4efddfd05"
											}
										}
									],
									"id": "004b3448-b49a-4b95-9d42-d79dddb54b5a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "0bef3199-acde-4a1d-b5a5-a3e1ea8b55f8"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1e1b783e-650e-42ce-9267-62bb3324242a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "2d08f47a-dde4-4454-bd3d-6c317463d6ba"
											}
										}
									],
									"id": "fb52dfcb-d07c-4b41-8ef8-d9b4a6ce931c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "81351e2a-5eb3-4b31-a7fe-90d176b10483"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "a34e72e5-e7c0-426f-9187-e61ea2cc9ef9"
											}
										}
									],
									"id": "15be8434-84c4-4554-92f2-66f856cab173",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "acca2f39-5e01-4b19-9eae-42ac4f463e96"
											}
										}
									],
									"id": "e0dedd52-26db-49d9-bf8c-920985702562",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "fc1e2884-3888-4c8c-82a0-daac5fc73537"
											}
										}
									],
									"id": "16bee84a-1625-4d9d-9eba-12282024f0be",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "db62b49a-953e-419f-a41d-6a9cd342866d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "bfc814e4-c853-4d2d-8d72-771c2616311c"
											}
										}
									],
									"id": "2fb225db-0dc7-4e33-8aec-5f86c52741d7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "52578213-70e7-407f-81c4-5b87f04f2d58"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "974119e6-3575-4feb-8034-e8e251224d80"
											}
										}
									],
									"id": "699f3b2f-3ec6-4bc5-af8a-d399aee95fa3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "2ca342e0-5518-48de-9fb6-813f8a2a5c75"
						}
					],
					"id": "80ba2688-3b18-459e-8fb9-8ce38cac290b",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "1ed19873-1ab8-4cf2-8c3d-3328245f671b"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "b0f68ee3-88fe-4732-a513-e371376ca73d"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "7809394a-3728-41df-a89e-62cb8e795fac"
											}
										}
									],
									"id": "9ca1c9d6-76b7-461f-8661-7996599f67ee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "42fc63d4-d115-4cfe-a522-6d6f718c41f9"
											}
										}
									],
									"id": "72937ce5-f693-4699-91a3-d3bfaf497c26",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "ff5247f2-3878-4e47-bf99-0b2104c038e0"
											}
										}
									],
									"id": "fe96df47-bb04-4716-86c0-a95479cbd122",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "8e16d533-6036-4e76-bf0f-e8fd854a5ec5"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "a5f09b05-8e81-48e8-88a7-4c99d33bb064"
											}
										}
									],
									"id": "7a67372c-4f77-4b8d-92e8-bc1ddb5799fe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "8caad198-6cc2-422d-9480-ee863b5d2592"
											}
										}
									],
									"id": "a36a1926-7b84-4f52-928c-58a91fd09d3a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "adb811ce-2033-4510-bfe8-354ccb5112aa"
											}
										}
									],
									"id": "0cb5e861-4bb0-4d31-8430-c421c96dae95",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "9ec5df8a-a71f-4c2e-a338-9e481afd69b8"
						}
					],
					"id": "1c1b3ae0-62dc-4ac1-b350-594e4fef50d9"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "045b60c9-2b6d-43fa-879d-a06c32330690"
													}
												}
											],
											"id": "9ed0d48d-b843-49e3-a463-1006cca6168e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "9187a8b8-5290-43d3-a145-651bc390fc32"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "4a5da28b-eb7d-4043-bdb1-608859ec9c42"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "7dbfa97a-bdcb-48d8-9531-fa7843061a96"
													}
												}
											],
											"id": "3e903ae0-859a-4992-9160-8f749c35389e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "89d8039e-b8c8-465f-a2b7-025556d5e2f4"
													}
												}
											],
											"id": "9b896bd1-53a3-4632-8f72-145de1c0a5e2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "d5df8aff-7904-43de-8342-8337126b93e1"
													}
												}
											],
											"id": "61525ca6-b71c-45d4-869f-8dcf4c1c6716",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "5c9e20d2-5542-4ae7-aed7-4fc70ed64cb0"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "82728a19-a6bc-4350-89b6-4357e0ea4ed7"
													}
												}
											],
											"id": "f1af4c06-98e4-4441-8992-471fb156666e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "887cee59-c01c-4065-8f41-8974e23a8e09"
													}
												}
											],
											"id": "905a9710-042b-4e9a-a291-ee562d088870",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "1f1914eb-18b2-4a63-8600-5f07779d821a"
													}
												}
											],
											"id": "d55fdb86-b649-4a94-a337-5091adb06cfa",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "4f54fa01-91ec-4431-b745-641c70aa1074"
													}
												}
											],
											"id": "3e5f3f35-60a0-47ff-83f3-01d9178f36f5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "e5bcfa4d-9c4b-47bf-8151-67511da6cd67"
													}
												}
											],
											"id": "99d6409a-1102-49c9-9190-b7f66e918e0c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "4153e030-40e3-4934-801b-6eec464ab489"
													}
												}
											],
											"id": "6e95f17a-2d14-489c-b0ae-7eeffa00c09a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2f617d23-3f23-4d0d-a3dd-f4af370a21e5"
								}
							],
							"id": "c9f8bfee-3668-4c65-abbc-fe2e4f2b4aba",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7b59fdb7-1e75-4fe6-9f50-144d8cf599f0"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "acaeef47-cf56-4e54-b5e1-337f8a2f0840"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "6641d41c-b3a4-42b2-a685-535ad1be8f34"
													}
												}
											],
											"id": "67dd17db-4700-42e2-b5a9-dcdca2d6adde",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "878b50a5-7878-4ac3-b5ff-fd4671b7130d",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "5b6998bc-a84d-43f6-bc48-a032481af9d2"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "ec659069-895e-4651-84a8-1879f0b58dbc"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "21bd4fbd-a3a1-458d-bea4-d0c5d3e57c61"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "ec70e8d9-e419-4f6e-8884-2671aca09fc2"
													}
												}
											],
											"id": "ed3a0f14-85fc-4982-93e3-318200ca7090",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "fd40e252-a7ff-4445-9125-c991b95bc9c2"
													}
												}
											],
											"id": "b44b1a5e-4c80-47c7-af28-61bd92bc3e5f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "03fe28ad-de54-41c3-9a1e-bc5c71108b6d"
													}
												}
											],
											"id": "db6fefcc-f349-4ac3-993a-b01dba5ad68e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "3a4755a8-07c2-4245-8498-ef5375ee63e2"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1d56be7c-61ef-4c58-87c9-2503094a28a4"
													}
												}
											],
											"id": "934e915c-0719-4c9e-b33b-516b02a31a06",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "83abda0d-3236-46e3-be75-df566fb9d61d"
													}
												}
											],
											"id": "32e6b2f7-fb36-41a1-95b5-8b64533c71b3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "931706ff-b457-4898-a6cc-0f29bba8f05e"
													}
												}
											],
											"id": "b4fccc84-fbe3-419c-ae8c-a89f1d8e1afb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "ff0e8b29-13ee-4d3a-b4d6-8ee028b3a536"
													}
												}
											],
											"id": "b16b19da-af03-45fe-bab1-068dc04a2f44",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "b91f0d98-29dc-4899-b0f6-25197a496380"
													}
												}
											],
											"id": "4befe774-b08d-4666-af69-14fd7751dafe",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "7f8726c7-151c-4738-a55f-f6f77271151e"
													}
												}
											],
											"id": "e12fc674-a21f-4f6d-b01c-6920ba62f956",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "fa725b40-eda5-4327-bdf0-5506f01b4020"
								}
							],
							"id": "f6e8d67c-47f0-4b50-a081-45ba0675779c",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "3ec66b1b-62b0-4b62-9c4f-1d7abb1fccaa"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "e3dd49f6-947a-4bc4-b7a6-fc2099f6ff95"
									}
								}
							]
						}
					],
					"id": "0700a0e3-7c72-43c5-b186-ec3e7210d8bd",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "c188fef2-b8c8-4238-b021-651e2a748395"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "9f76f670-8620-4f61-b772-2d61a4388e12"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "3dd9c481-78bf-4f68-b505-30959a88f494",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "0a2ba2c7-605a-4aa5-b1f1-30090c0a85e6"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "480fa508-93fe-4c1a-9fda-cca5af71db53"
											}
										}
									],
									"id": "fe02d76a-d141-40db-8ff5-ae9a1a5dd94f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6c6f76b4-ef08-424a-9828-779fb8940441"
											}
										}
									],
									"id": "7663d10d-ce70-460b-8b9e-c9b3187d70c8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "09fb2be8-2c0a-4584-aaf4-17cb509e9e6b"
											}
										}
									],
									"id": "820e5740-8256-4a12-b178-48d2ee9d9557",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6b03f9b8-c220-4b81-a480-9cf382f6752f"
											}
										}
									],
									"id": "4e445915-5a57-4457-934a-e365d60bd458",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "21b4c966-277c-4a52-9020-aaa26ffb652f"
											}
										}
									],
									"id": "483bfe9c-baad-41b6-acf2-dd452e2361a3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "95ce5d1f-94d6-44b1-ab81-fe992f9d67e8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "977be6a5-8065-406c-a453-1726a35bcea7"
											}
										}
									],
									"id": "c3329c11-a430-4098-9d1c-09a06bb3e1ec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "d6183145-dbe1-45a6-ab6d-22a293f012ce"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "ef0a4a37-9982-4d53-9c59-26543a9cdb11"
											}
										}
									],
									"id": "7b3e728b-ebe6-4568-a619-d72a1e1e2763",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4a5c37a9-be12-473f-9438-974f21a17608"
											}
										}
									],
									"id": "578b5e09-fd49-4a5a-a651-a65105ea9904",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "8e4fa3b2-4157-40ba-b717-80a043a375df"
											}
										}
									],
									"id": "16a31bb8-428d-4447-acc2-67afc35883fd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4e2f4d40-e8c1-43b7-8609-c8afd6ff1d59"
											}
										}
									],
									"id": "beacb724-7a66-4c74-a4af-858ce807f687",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "1c8cbf74-ccbb-4313-beae-3080b7468013"
											}
										}
									],
									"id": "4fbcab74-9e49-4c8c-a331-17b61361de06",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b51d38e9-1564-4d85-83a9-e17f1ebe0736"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "ac4b2909-6316-456f-b1cf-9f3b799c1bf4"
											}
										}
									],
									"id": "304b7702-371b-44fb-a91a-01d4a7687004",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ad523628-3fef-4c70-a3e0-cbfe4c3b8836"
											}
										}
									],
									"id": "f581a1f0-cc27-4d97-ba64-16ce96be00cd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4a856f3a-43aa-43d8-829c-7862b389e05a"
											}
										}
									],
									"id": "64e7bcb3-6a0e-48a2-a17a-5d0b5728885b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "9a24b59f-2240-499d-9f7b-6efbd945504b"
											}
										}
									],
									"id": "aa7a337a-7788-407c-b14a-b8a1db474c7c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c9d83cd6-46b9-438f-ac91-e258eac466ed"
											}
										}
									],
									"id": "b7f10cf3-7602-410d-bccc-ddfe296ac121",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "fc21b26b-4256-4219-9f3f-cc19470dbc20"
											}
										}
									],
									"id": "11991927-77bc-4dc5-894a-ec7b8985a7f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9678ec3c-7164-49d3-9306-46d7ec26d715"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "0b21599f-2cdd-48ae-a75f-a13117e72f2b"
											}
										}
									],
									"id": "b9323032-7b23-4ce3-9d0d-17a5149d5fae",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "e3cb2a55-cf0c-4d7f-81d5-a247ed29de41"
											}
										}
									],
									"id": "e7de15af-8c57-4ae1-be6b-5e67f5764349",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "5b1ff76a-6d49-44b1-abf8-0598aec197df"
											}
										}
									],
									"id": "5ca8f487-f00b-400e-8864-cc2dbf7b0134",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "09b947ca-87b8-4fdf-982e-79f9f163ff81"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "a0bdb7e5-d049-43dd-86ab-d82e6ce94e34"
											}
										}
									],
									"id": "23d53ef5-49bf-40bf-8cf4-9a027d96a917",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "79c6e136-6c7e-4540-b3ce-717a909b2031"
						}
					],
					"id": "ba0c0812-e8cd-4659-8360-c20fb2a04919",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "e762f051-dbe4-4e97-8f0d-4455dc657f5d"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "ef7b2aa7-8ba2-4cc0-b09d-21a727ed1134"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "cef8c24f-2647-4204-b332-941eca2525a2"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "cb0cf6fc-8633-4bb8-a81a-2bdf1f0f9821"
									}
								}
							],
							"id": "5a84f5d1-572f-4dbf-9516-125aacec1f13",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "1ab65a6d-c334-47d4-bd0f-d7f02f326213",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "9ec00691-8d2d-4964-bd1e-7a4b87604d3f",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "188510a6-e326-4983-96d4-feb472cdea6a",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "ad58d1a9-93bb-498b-9222-1b385a78ebe0"
									}
								}
							],
							"id": "11f1bb90-6a31-4633-82c3-195894441b5a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "10e0a403-24a2-47e5-bc42-978275f78ddf"
									}
								}
							],
							"id": "97c76ecb-3499-4223-b3d8-aa8684d99125",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "710243db-a6f3-474e-8ef8-c323844d67a8"
									}
								}
							],
							"id": "1dbce422-dc1c-4818-ab4c-cb8b1dabbe49",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "9f1cf012-6ee8-4f1f-8dc0-1817d0ff8be6",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "71494042-f198-4527-bf6e-777e41b8a43f"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "3e4a9f29-b87c-42ed-a821-94e0160369fd"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "465b6a3a-1fbc-459a-97b7-987fe1112bb4"
									}
								}
							],
							"id": "3d2f6a52-eb17-459c-96a9-2b91aacb424a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "1577f192-769b-4a28-879a-da91ab40194e"
									}
								}
							],
							"id": "97f49e7b-a3ba-4b7e-88a6-ad465b73f100",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "2cffda6b-99d8-459a-8e61-38d6eef12f6b"
									}
								}
							],
							"id": "3337c914-9ad0-4bc4-8f38-5e9265b3c180",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "e2ec60d1-6a3b-473a-89e6-bb8d0024f3db",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "96e1c8fe-1a9f-493f-9541-d8e7530f3137"
									}
								}
							],
							"id": "8a7dbd4c-2540-4c8d-8759-c5f18eb9f3f6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "f5db7c9e-a031-448b-99a0-d5bcd1ae0674"
				}
			],
			"id": "15b85bb1-1454-42ad-8f8a-701f6e88f436"
		},
		{
			"name": "Tests Copy 5",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0c5f11b5-e67c-4ebb-9885-94910e300d8a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "9b289a1b-bfe4-454a-bfe3-bb8eb506a662"
											}
										}
									],
									"id": "d48312e9-846e-4748-8972-875a181f8be9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a57a361a-7fed-4b85-bd63-db1d78737f43"
											}
										}
									],
									"id": "adaa4b76-53d2-43db-9887-2d64a06f0b85",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "563a79fd-6272-467a-9cf9-e8dfc4b7b91e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "8b34fd6b-3f69-40a5-b2ba-ea0285188a76"
											}
										}
									],
									"id": "3c7eb459-e009-4f94-b7ea-c323334bd4a4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "c5237799-9d8c-4289-8fc2-21878c0cd743"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "13494068-b925-4b55-aa04-33bb52df6cbc"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "e8031e62-66fa-4953-9bf7-458c14cda8e2"
											}
										}
									],
									"id": "2dbebf32-e6ca-4b5d-9287-109c2ffc3d68",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "be77f474-052e-4db6-a341-3e84ebd5077b"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "3feb573b-c512-442c-ae70-1ca9232f9c51"
											}
										}
									],
									"id": "45d34ccf-b70b-44f7-96b5-897014d56006",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8147af12-ac55-4d9f-a875-51c6a678394e"
											}
										}
									],
									"id": "f644d9f2-0f33-49fa-ac2e-e65be7a049ca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0972c06c-544a-4605-b563-6b377f11080f"
											}
										}
									],
									"id": "0458cdea-ed5b-4101-b1f7-ed8fd7ed1f2b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "86a1e2ef-d589-4a44-81f1-762be94f5626"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "d3af84b5-13d7-4503-8377-e81fd58ad664"
											}
										}
									],
									"id": "8c585785-dd6d-46be-adcb-b166d8bcbeeb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "edb1f9b1-f696-49b7-baba-0fa0189dda04"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "16cb6b42-e7f7-45bd-a400-85ae53ff4e38"
											}
										}
									],
									"id": "c5ef0c36-cadc-4a87-a6c5-200921f83eb5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "9d369486-b018-4f56-b5d5-a94caf4a31ab"
						}
					],
					"id": "76560520-f21b-43fa-9d7c-b210996c50ae",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a08213bd-140f-4faa-819d-aea67e8801b8"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "7a31d985-0214-4954-ab5c-7e1afcc96575"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "41eac6d6-76a9-4313-8f66-c58af9bc990f"
											}
										}
									],
									"id": "a86f4620-877a-4f31-ab5d-515e162b9de7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "dcc0db61-3abd-482b-b724-3c179e2956be"
											}
										}
									],
									"id": "7370a6a2-fb60-4105-8ce8-0149ab6685c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "2b8eee8f-60cc-4fb8-af13-b03451598180"
											}
										}
									],
									"id": "c7556f75-19c3-48b2-9a82-560f013d0530",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "5ac2324c-999f-47f4-84c2-a71707172326"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "80320715-38f0-4757-bcbe-90b1c971c57a"
											}
										}
									],
									"id": "6710fe79-6937-4882-b6e0-e4928a6ab1b4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "4e25176c-1f0d-4104-8bd2-e14672a6b0e5"
											}
										}
									],
									"id": "932a216a-83ba-4808-8b9b-043de9f6e87c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "013d4675-e282-434d-bb83-f3470744c1c1"
											}
										}
									],
									"id": "ea3f656a-7cf3-4e39-854e-4bc3d43d1c41",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "c6737fb2-8e24-4d19-82ad-939b52a585d4"
						}
					],
					"id": "2a1f97d4-af31-4dd3-8f7c-ccd4a78fd44e"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "7d15a4f9-4eba-49e6-8113-cabfff3ee408"
													}
												}
											],
											"id": "d63da5f8-9a34-499f-bcb4-f5cc94ce2817",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "6a728a56-7d5f-4db9-a6bb-7abf1d68a3bf"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "7987193f-de42-4691-919c-44d0167dc7e6"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "cd155a67-9a3a-4fe2-b440-49aef89c1a50"
													}
												}
											],
											"id": "4fd0e5bc-0905-4d76-ba36-19d0cc65dc58",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "158d0d74-5479-452e-a33a-fb580664e738"
													}
												}
											],
											"id": "fff8939b-67eb-4ff2-b8cf-f75b9cb3282d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "1ed713db-3cbd-4558-a014-67f78d6e4710"
													}
												}
											],
											"id": "3346b1c4-de67-491d-834d-8ce7f9ceff6b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "4dcdeb3b-c353-48ec-9d95-9bdf82ea95fb"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "5308e903-6f9f-4b2e-bbf1-45f6ae9e8dfe"
													}
												}
											],
											"id": "7b63176c-fec3-4bd9-b56e-8519b402535e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "f00c07d5-45eb-4aaa-bf66-93bef4d98f55"
													}
												}
											],
											"id": "9146e624-6003-4906-8fca-e70708302dc9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "69c1b64e-4203-42e1-8a11-e7ba950114ad"
													}
												}
											],
											"id": "6f4d59c5-983e-4e6e-9cc8-9654081f90f0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "bb525690-a42f-449e-a9b8-7fff18910d7c"
													}
												}
											],
											"id": "d7a9593b-a619-4aa6-9823-a959e1597c23",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "8f1c567c-7807-44d8-bf9b-dc278b42751a"
													}
												}
											],
											"id": "d6a41584-2961-4d82-a034-e86da38cef79",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "ddbeff6c-b992-464f-921a-b0922a1926ad"
													}
												}
											],
											"id": "b756da76-1416-4366-88ea-2a0203c49f9b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "1e7e1444-a196-4a6c-90bb-c9d1f9183bb7"
								}
							],
							"id": "ca860058-63b8-4903-9311-2fcc14d12532",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "9a744833-ab16-4eaf-833e-f422a8707830"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "def2bff6-bcc3-4664-806a-2212d0dc144c"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "7e58f60c-d873-4367-b8be-43b07b699df1"
													}
												}
											],
											"id": "c2aeccc7-b085-45ea-b3ae-e725b686cc92",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "c0c19d7e-ff15-41d3-ad8f-741058df1898",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "a1648100-649f-4122-939a-62d7168eac32"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "f24ca5ea-9517-49e4-b23c-7782896a8ec3"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "b3e4f4b9-7dc4-4745-b817-71183f066299"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "a8d1cbd8-a647-42b9-bf3b-3428e28b0706"
													}
												}
											],
											"id": "d63b8b42-f1b2-451e-9c00-80ad8c9ddd01",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "8e1e906b-6c9c-4f02-a3e1-3eb861b6e1c1"
													}
												}
											],
											"id": "27e05f32-5cd4-4ad0-b71a-d4eb3570da7a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "ede9ae63-2d74-448f-992e-437482f9d7d1"
													}
												}
											],
											"id": "2f1f09f2-ac7b-49de-8a6c-f1357899b7b2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "85906e9b-4029-4727-ad97-8ef202c58d31"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "0119e6f7-eaa1-41af-a8f0-b5d3888b735b"
													}
												}
											],
											"id": "3a4d3242-e5b6-40a6-bb50-69cea79f3314",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "aa4712cd-1e6e-4f57-b384-ed5117b97989"
													}
												}
											],
											"id": "9f8dc0a7-382d-4750-a09a-1bce5fc6f102",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "aabefcd8-0cd4-4833-8252-a034fadeaa00"
													}
												}
											],
											"id": "5052145c-1a5a-42b8-87ce-d8f7cf6ddd12",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "14c08bf8-38ff-41b1-bef9-e585f806742c"
													}
												}
											],
											"id": "2b30f78e-39a3-4b73-920f-3e5ac31fa567",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "700ec9cd-b445-407d-b8d3-9bd1fdadce53"
													}
												}
											],
											"id": "4fcd98c0-ced9-45c0-a107-fafef9c494df",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "42a3ec8b-84ad-4cfa-999c-312c3719b283"
													}
												}
											],
											"id": "4a222701-42ce-4cf1-815b-fd6ca5e2da0e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "5c5bf07d-625f-4581-a0a4-b74a6a41be50"
								}
							],
							"id": "3522a364-c5c9-4487-9ce9-d6b696c351f5",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "fba042d6-78dd-4aa4-82c5-cf97ae546ac2"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "0519ee97-1dfe-4ae0-a10b-ef139431f04f"
									}
								}
							]
						}
					],
					"id": "4e0c4e76-008a-425a-8279-5fd1629a12cf",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "098415b0-92f1-4ae6-b4ba-20374e609f49"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "bec213be-806a-48e1-8be9-f520795423be"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "7fcd1e0b-8b5c-44e3-8588-eb51427bbdc1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "5ba7f25a-bba5-4f9b-b8c5-af1501cf6650"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d4db859a-526a-4ead-8979-c607cad46e89"
											}
										}
									],
									"id": "40071b7a-4d6a-4958-ab40-a41b4d9ad478",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "61ec2e02-5b43-47b7-b776-7e7a0129a130"
											}
										}
									],
									"id": "97bfa906-d8c2-45dd-9254-3c9caca1de18",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "264e3361-de9e-4f4d-bd79-9a11971f751f"
											}
										}
									],
									"id": "b23f3f17-8bb3-4b70-878e-fe4ca4b11655",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3d25a649-a267-4507-aae6-a6aa3b0f8ad1"
											}
										}
									],
									"id": "4331b465-6755-4d50-96c9-1055830b1f82",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "d1df85b9-f589-4bdf-8d4f-74973ae59057"
											}
										}
									],
									"id": "9ac49e59-12bd-4d9f-820b-75329c84f7dd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e9906594-499c-40e4-bd47-8e0ce726a14f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "23d1197e-6eae-4f5b-a7ea-d05ea940e6b3"
											}
										}
									],
									"id": "55dd5da5-94b2-4697-bfcc-d3605f6bbcc9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "33b85b34-1435-4da7-9d83-3e50c337484b"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "de89066b-12b0-440b-b3ea-f367dce99457"
											}
										}
									],
									"id": "7141d074-18d3-4e1e-8cd2-c58dbf6199c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ae17a7a5-29b0-4ba1-bb29-bc19315c667f"
											}
										}
									],
									"id": "1b249778-8a5d-47bc-94ec-42a86260e3c3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "2f2c079f-6890-4d1c-9c6d-b337a99fab69"
											}
										}
									],
									"id": "89080664-74f7-4287-871f-302a90bdd3d8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ce88b2a9-13b3-4228-9aeb-5639cfcd49f7"
											}
										}
									],
									"id": "4a6f2a08-7936-4754-965a-aacdd59c77d6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "bb48e52c-bdab-4346-9338-0a4dd1eb2199"
											}
										}
									],
									"id": "a4bdbbc5-bbe0-4213-a649-2e61f8d257e7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a1750397-993d-4ef0-bbd2-d88988d8e16c"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "b28925ac-8def-44e4-9d03-789f4627e8ae"
											}
										}
									],
									"id": "5b816553-5957-40fb-b3c2-15f0b7a65101",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f9488ea5-d7d1-4977-b932-97380089e037"
											}
										}
									],
									"id": "5062a4d6-7c26-400e-ae28-c437d4bf8179",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "438d4df6-4c82-4685-a744-3c843563f0ed"
											}
										}
									],
									"id": "cbbab5a4-0bef-4ca6-95f4-7f0eda7e7010",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "f184d1b7-3f6f-4d31-a9c4-3d79a72568f3"
											}
										}
									],
									"id": "98602102-08c0-45df-9987-04e1bf6785b5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5f6cfcc2-8986-499a-a7c2-804c3096638a"
											}
										}
									],
									"id": "51c2c7fa-bc94-4934-ba0c-60790ed3af94",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "57b745ec-f0be-416a-afbf-be3f041db299"
											}
										}
									],
									"id": "c860320a-bc74-4263-9844-95fe17d7c71f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "084a55c2-eda2-476c-b766-5d91f2af2853"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "c21ef63d-0f63-43b3-9b69-c080d2354f18"
											}
										}
									],
									"id": "ba1af685-4bc8-4577-90ff-35ccaed3d2a8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "49fa769b-15cc-4060-88b9-7ca595175045"
											}
										}
									],
									"id": "e302d2e5-0927-4203-b67d-fc82ac6f61a9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "111c6974-8a39-429f-9d7d-dd979485e91b"
											}
										}
									],
									"id": "b1c515e6-7497-4dfa-8b06-fbae246884ee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "75baeebd-375e-4309-bfc5-2876995b4cfb"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "1fbdf824-288b-464d-bdcc-e25eecbf04bc"
											}
										}
									],
									"id": "7e7c8aa5-5509-4973-8b81-f67b4abddeb9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "860372bb-3585-4c9c-a9bb-3b62644d0650"
						}
					],
					"id": "81233cd9-b5c7-4a97-a4f8-dbe028c042f1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "098e569f-99c1-40fb-bc5d-d188eaa94998"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a58e38e1-deef-4d00-a7ec-10fd97eda84a"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "7119d50b-3f15-4d2e-859f-8694731c2fd8"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "e31881ef-17ff-4bb3-a698-b4b8aa827096"
									}
								}
							],
							"id": "843dfb01-fe66-4e1e-91f1-f92654d0d608",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "fcbc171e-1a2d-4e43-ad4b-566220821f29",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "8ffce1c9-fb89-413e-8f9c-69415744eca8",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "497db1db-44e6-42d8-8175-ea483e8c6280",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "9d5e11a9-0c38-4a10-a499-9ee2221825e2"
									}
								}
							],
							"id": "d516821c-aedc-4f5e-9777-a5e115d15eab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "247a9f53-ad22-45b7-87c8-6e723c59c23a"
									}
								}
							],
							"id": "cf7dbbbe-94b2-464f-be32-7a19f992501a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "cb09a9cf-86de-41f3-b209-19ecffdaffd7"
									}
								}
							],
							"id": "5110d733-ba34-4a0d-8b35-ab7490cb173a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "e9d2159e-8fa3-4b3b-be80-acb43c71c6a6",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "4b3c6044-1c3d-4592-96ae-499fd3a6bdcd"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "acfd86f6-56df-4518-871b-11503ef6b8be"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "23b5f2e1-81b0-4531-a347-c0b44f76c2fc"
									}
								}
							],
							"id": "6d74cde4-8cb7-4c4e-ba56-283b1e427470",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "d7720e67-e2ec-4333-8edf-cb36aa8e8718"
									}
								}
							],
							"id": "c1bfef72-9b8d-4f9a-8e25-246f8a1723e2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "2de07414-80aa-45b4-a6aa-625ab851bd8b"
									}
								}
							],
							"id": "b83c2a35-efb4-4818-a0bf-bbc5db27f650",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "877017fb-0b09-43b8-80e8-7ce87a650093",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "78b7c543-15f3-4a0e-94e1-0f4c04eb64a8"
									}
								}
							],
							"id": "2383dd30-c64d-4455-ad08-7b8f1904cdd8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "0ea031f1-c22e-4318-b130-8286e536c1a0"
				}
			],
			"id": "5ed9c501-0201-4a55-8d76-3d81412e9348"
		},
		{
			"name": "Tests Copy 6",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3c838956-8fde-4ab3-9ca8-d097c4aeaf99"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "c5c40db6-f37b-45fc-a3b2-bac2aca0f661"
											}
										}
									],
									"id": "13bd5e40-b20d-4670-ba67-9d60d2e963a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c74e5844-5389-4193-b7af-94d71dae7ea4"
											}
										}
									],
									"id": "eaf0bab4-c527-42eb-bc7f-c5529ca62bfd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "defd28fc-6ed7-4c58-a728-53d2f50edc51"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "1c72f1be-bd1f-4a07-9ad4-3f4a5d8a8288"
											}
										}
									],
									"id": "98526b8d-0346-42d2-a902-0c8f67598ea9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "1f09cfa0-0b64-4dd5-a025-adab9414dad1"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c2fe8eb0-2f5b-4b3b-b0ee-113343322291"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "cf22a0b4-a18a-4475-af90-b06113bf8627"
											}
										}
									],
									"id": "aac0cce7-bdf9-456c-bba5-b7b44988de46",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c3721dc9-7f23-4062-9e14-5ec428bc48f3"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "1d10ffe9-a576-43e7-a5e7-aad79bc004ce"
											}
										}
									],
									"id": "7663c77c-8110-4b1a-bdcf-8c030078ac83",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b54b614c-e889-43fc-8ff6-6142e8c3ab73"
											}
										}
									],
									"id": "22ec8cea-fd5d-497d-ac36-73858c99b7d0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bb93f8aa-2d67-4a8c-812d-2b91f1da25ed"
											}
										}
									],
									"id": "29d1c4d3-e15f-4960-a1c4-a850d49e6a8d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "88befbcb-575e-418b-a323-25f09810220c"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "2c7e15b1-db68-45ab-b2d0-51cd24776730"
											}
										}
									],
									"id": "67430620-25a1-4f8b-a73f-b96ce9ebd0d4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "81251047-3315-4687-80b3-b376c3bf980a"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "b1ba62fa-d927-493f-807e-03385c50ac6f"
											}
										}
									],
									"id": "7f12b111-9711-4be6-8dd8-d1d2dafcf530",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "b92b3af7-f8c5-4c95-b66f-50471ed0412d"
						}
					],
					"id": "d599165a-e891-43d7-994b-360caf427990",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "74105bb9-f1b0-4d93-afdf-2ee61a9e96fa"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "fbd79bce-0354-41f8-bc9e-c8154f0294bc"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "dfadfbe9-2b46-4d0c-a879-1f6988f121b2"
											}
										}
									],
									"id": "a4c648c4-d750-48b4-9535-e3ea22b380b3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "f7265a67-0d99-4333-b3d5-2be36b9dc2cb"
											}
										}
									],
									"id": "0b36eaf3-8ad1-4187-b26d-3c9de94dba00",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "5e889626-3e62-4937-8085-150e8a18fa6f"
											}
										}
									],
									"id": "8fc546a2-5d4c-4dd0-ace5-ea421a39c60a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "1643366c-91a1-45b9-a959-6630ab2ac1a5"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "df78d4ca-053c-4b91-a173-a3c7fa152c04"
											}
										}
									],
									"id": "88137f21-5d9a-4d73-9f21-bcde8b63a0eb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "9daa76bd-982c-49a8-820d-9073156b8093"
											}
										}
									],
									"id": "477ba73d-c108-4896-b1ee-cbbb1db9711b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "bf494881-50e6-45e2-80a0-4d959bccc4d9"
											}
										}
									],
									"id": "2ecc970b-cc72-4c38-8de4-57edeae2cb4e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "e539e54d-522d-4378-86f5-4835446b596f"
						}
					],
					"id": "eba64a8b-e28a-427e-860d-36feb539f692"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "87f2b87b-d748-4896-ba7c-dcd2ad7ab863"
													}
												}
											],
											"id": "2be1d85c-2091-4c70-a2d6-5f3036e26f51",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "cd2f7701-5b9e-4df0-b96d-7e253b492f73"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "3a153f84-f2c3-4439-838d-5b2ebcbe891a"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "327d8b2c-8f2f-4849-a07a-65361dbd4c4e"
													}
												}
											],
											"id": "f346517d-1e3e-49d6-801d-2e6bce62a67f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "10b4cf63-610d-4bd1-a09d-585bdf47d99d"
													}
												}
											],
											"id": "43a275ad-2893-4507-9000-dc79148a5466",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "29984bb0-198e-4c7d-aa6b-e6f6bfcf42b1"
													}
												}
											],
											"id": "a1370117-87e1-44c7-b054-4d4a382c47af",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "de2d66ad-66a0-4af2-a10a-9b591fadc482"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "d525435d-9caa-4c0d-a129-339d463f0f53"
													}
												}
											],
											"id": "223a898f-758f-43dd-a2ba-1639f6f179f5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "f829f03f-398a-4dfd-b9e9-fafaa59aa775"
													}
												}
											],
											"id": "64f4fbea-9ec5-435e-b665-4f3f65d1dab7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "b39ff1f9-3ce6-454a-bcec-edce07ad6b28"
													}
												}
											],
											"id": "8190d061-3d2e-4f6e-8852-0cbc9a68ed63",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "7f6940ec-f22f-41ce-8c8c-f5239f5c6896"
													}
												}
											],
											"id": "764d8b9f-ddb4-4c5b-8636-9844b4e4280a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "9ebd468b-1cf6-4c07-a60b-1c4fb51824e6"
													}
												}
											],
											"id": "4eba7fba-bc29-4074-b5e6-cf5de283f4a4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "03bd187e-a0f2-46e7-b260-fd8a43384a98"
													}
												}
											],
											"id": "70877769-595e-40bb-95b5-750ea91d5752",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "96696597-4519-4ef1-9253-f4eead75da75"
								}
							],
							"id": "3904ff21-cf61-4b07-898e-4d12a3c2c874",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "f3f7512d-5367-4f31-ba72-73802d651467"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "e264ff33-c37a-44d6-a834-8c96074892de"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "0721bbcc-89c1-42f6-817a-88b7bc6c19f1"
													}
												}
											],
											"id": "fad1bf11-7af5-4b9c-8fc2-0f958222f1a2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "75449eec-52e5-405a-8f84-cb6c379a7a59",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "20934928-28bb-49d9-b795-fa19afae5e1f"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "079fdb10-118b-4d26-b078-4755976e7191"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "dbaba28c-81de-4f84-a4c0-268fed500228"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "dd78db5c-0686-4367-83a9-867aebebdd60"
													}
												}
											],
											"id": "4ef2779d-dd03-45fd-9d66-fcf598b91fcc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "682f1f47-5a0c-42d4-8b4b-4e5003c903c3"
													}
												}
											],
											"id": "8d6d8c7f-7866-4186-a2f3-e89497c741b3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "53621ac2-f3cd-45ab-b908-3f9c232fa40f"
													}
												}
											],
											"id": "0d9b0082-99cf-4bcb-805e-117bfa87b310",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "6b39b108-3d06-405e-81d5-37f28d80fe1e"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "5db1787b-b131-4853-b993-f74431fce80a"
													}
												}
											],
											"id": "73a99060-d6d0-4b99-8667-007dfe2e7952",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "3d8da461-04e4-4238-ad9c-b431d25cb6a9"
													}
												}
											],
											"id": "3cf05518-cbe7-479a-9023-6520f0ecedf6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "d97b72ab-564c-4650-83ee-624323249855"
													}
												}
											],
											"id": "300ae4a0-8c48-4e55-9d11-593af7487722",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "b053cfcb-a905-42cc-9cd1-7845666c6008"
													}
												}
											],
											"id": "f4faee88-004e-4817-8b84-84e0951ade56",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "6f7cbcb0-a47e-4032-bb0a-7fece8e06b4b"
													}
												}
											],
											"id": "2a52b012-88b4-4400-88e6-34306e20ce1f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "12ed9096-2438-492a-bda9-5a69e116045e"
													}
												}
											],
											"id": "d879f149-8ced-450d-af29-8a9d7d8e7eb5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "71dc68a1-6749-4338-b16e-5f4ed30c2fb9"
								}
							],
							"id": "f5f33c02-a979-41c4-8cdc-a14984fc4a4e",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "ff0ddc4a-0420-4102-89e5-f69dad95f02c"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "95626108-19cd-4999-bc01-f696b9b56227"
									}
								}
							]
						}
					],
					"id": "fecee68b-40a8-49a4-aae7-d33f01ed813f",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "6b9049ee-14bf-4022-903d-6d08f04f40d6"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "836a973f-549f-400a-aea6-d77c23209d56"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "326cca9a-cd40-4969-88d2-26281900c0f6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "4af3b28d-5f2a-4f21-b4ae-0a9c10dd0b7b"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "635bf579-3fda-498b-8985-e5d93ee7147d"
											}
										}
									],
									"id": "482206be-3627-4122-96e0-18ab98e80499",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cb45ee33-d85f-4aed-86a1-eee5f1859d8b"
											}
										}
									],
									"id": "4695d95f-6ac5-43cc-a463-4addc71b63d7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "2ad49caf-a041-474a-95d0-a91b9d744c82"
											}
										}
									],
									"id": "98e8ec51-e4e0-4ede-8e1d-c16e33d1e397",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "86828447-8af9-4687-8016-19b0d95c290e"
											}
										}
									],
									"id": "e1091851-1e01-48f0-8aa6-864e353f2242",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "f8e0266d-b21d-401b-a246-223b702cc81f"
											}
										}
									],
									"id": "4619c8d1-5de8-4e0c-8aee-01c7e82a0a51",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4a43ccbf-36db-4d3d-b5fa-08d42675b487"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "a82792aa-2a14-4711-9080-034125f41599"
											}
										}
									],
									"id": "5943b58b-acc9-45f0-a218-196eb20f2abd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "67be29e6-7dd9-48bb-abbf-913669acf839"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "e960b42c-6e32-43b9-8955-f9e7f6ec839c"
											}
										}
									],
									"id": "41a22b9b-d1b1-4d85-944a-022fb9046cf7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ec18bc9f-cabf-4156-ab13-310e71699269"
											}
										}
									],
									"id": "acd53626-3815-4750-a379-9c35bd07ce4a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "9cad5972-ed25-4ad6-a02b-50546aed911c"
											}
										}
									],
									"id": "435db81f-ed33-44ad-b139-33f14700afc6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d7ea4c74-280a-498f-96e5-9c2e8b743736"
											}
										}
									],
									"id": "4e6b438c-4846-4a80-9680-122dbf280a89",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "8546b43c-6f4c-4d79-8160-a5d5cf8cf94e"
											}
										}
									],
									"id": "a3e2a80c-e7b7-4dd5-a1e4-cf3b6f11f810",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b34d1376-9677-4cf8-a676-6d864116c2bd"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "4f45dcfa-11c2-426c-9d71-fe682f873c0b"
											}
										}
									],
									"id": "95051d94-810d-4943-b912-9d87885f6c2e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "80fadcaf-4672-459e-a01f-9045878789a6"
											}
										}
									],
									"id": "4181d1af-3d17-48ac-a8fb-7fef951f3c5f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9bfea534-26d4-4828-a514-9970fd62a790"
											}
										}
									],
									"id": "8de6aa6c-ef2c-4a47-818f-3ccea55b4fe6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "1dcd91c4-3859-4d0c-b3f4-24a707fd998f"
											}
										}
									],
									"id": "c6815bee-b8aa-418e-a20d-be53bbeda8ef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "98441c09-cbb9-40e3-a265-2f50b6bc2294"
											}
										}
									],
									"id": "8117acd8-62af-4270-9a5d-08878d5623cb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "6ba352a0-d26a-4c54-807d-a87068c4db8c"
											}
										}
									],
									"id": "39b84997-21f6-4266-98e8-956ce1149355",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3df2e496-d380-4274-a96c-e3de9dac06c8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "88e3bba1-3c23-40da-960c-fef02a409b00"
											}
										}
									],
									"id": "51235f43-5fdf-4813-900c-d6bc9d84c2e4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "f05e913c-7857-433d-bc33-4fee06849e82"
											}
										}
									],
									"id": "e9ee319b-1342-4ad0-b8a4-185973451ea1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "64bac948-3647-49e6-8785-139b87e31808"
											}
										}
									],
									"id": "d5493a3e-7036-40f5-ab95-db2dadf05357",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ec9a6e71-154a-4670-97fb-0575ab61d3af"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "31ae74cd-ccaa-4e44-aac0-aaa8a9fb190b"
											}
										}
									],
									"id": "8bf8a4f0-a47e-49fb-82c6-c3bf88d60ffa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "9d761be8-3994-4f55-acfe-567451a33f2f"
						}
					],
					"id": "ccb44330-869d-4421-93e0-4073e2ff4684",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "565b2d4c-02d0-4613-901e-e7ad67910ca3"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "86adfaff-ff86-4de3-a7e4-b9939dc284e9"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "1c9f0164-fde9-4959-9967-24b429a13af9"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "878608b9-63bf-40c2-8e20-a2e6ceadfaeb"
									}
								}
							],
							"id": "49731f0a-e1cc-476e-92cb-f206d091f066",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "2c1006f7-977a-4014-a9b0-a1eeb3cb9d7a",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "a4b338db-34af-44a2-aab0-79133d327806",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "ecfb1983-1228-4c4b-a649-51a91a45d276",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "61c79a2a-37b2-4ead-bde5-4601757d7145"
									}
								}
							],
							"id": "b2fa324d-b428-421b-8f4a-96e301e149da",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "6673c454-170d-4410-92e8-77d68b080999"
									}
								}
							],
							"id": "018722f1-72d7-4d05-9901-9ba255e3d77d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "75c9e2ae-ccc8-4641-a5c1-3b954b9d96fa"
									}
								}
							],
							"id": "98915859-7dad-4f1d-befd-88c3cf2a1c87",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "5fd19422-1053-4de1-aab6-444a77d6bfd2",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "162a5c01-ec29-4fe3-b477-0848aac3d3d5"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "0b36af00-f99c-4cfd-bd85-128e734a778a"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "cb6499c8-c575-4c88-9737-b549810a5ec1"
									}
								}
							],
							"id": "67858ca6-4896-4083-ac25-474fe6998d01",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "00ba5c1f-b2f2-49b4-9d8f-585b357410d7"
									}
								}
							],
							"id": "bcf1e989-9518-43a1-93b5-6d5d3e6267d3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "e88353db-09bb-48cb-b3f8-c199cf7c2e98"
									}
								}
							],
							"id": "1ed2c573-2f16-4438-856a-381df9b355f9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "efe7c780-b85b-4f16-95dd-d0355815c572",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "6c70d0db-0350-436d-b9c4-f84769852030"
									}
								}
							],
							"id": "64afc67e-dae6-4698-a052-f9621b0b1979",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "b869b874-052e-44a2-9b08-23d5e4191685"
				}
			],
			"id": "24dbb82e-e1de-4852-8c20-60e8449ac78e"
		},
		{
			"name": "Tests Copy 7",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "feac10e6-0427-4174-a1d5-49d4eba60707"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "430fbcf1-a20d-41e6-b923-136a27c0375e"
											}
										}
									],
									"id": "4887c9f3-858d-4f7e-beb8-2aef063f4b49",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a9ff5300-7701-4540-8449-64700e96652f"
											}
										}
									],
									"id": "691d939a-66f2-424e-a7a8-5477041cf290",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ab282146-1cba-4035-a9bb-36bab07c26d8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "711fe457-884f-43c3-aa6d-d0f38a254b68"
											}
										}
									],
									"id": "82182866-7f58-4b0e-9a3c-032ee94db18b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "8020ecea-1649-4e06-bee9-a9bcfa561c16"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f8aec3f5-89c3-4a27-91c3-26804c34a7dd"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "cbad9d9b-64d8-430a-9b4b-8325ef71f705"
											}
										}
									],
									"id": "5971d14b-ac27-4959-8953-41b50121cc24",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8dbe8c38-a44d-48be-8637-1ea4ae7ef1a3"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "57ab1067-f284-4002-8fbc-e64cbdbe4aeb"
											}
										}
									],
									"id": "c6e34b98-684d-4e6b-9fe7-3641bc62f3fb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bbf705af-ba9f-40c6-8f61-30870c94a445"
											}
										}
									],
									"id": "9d6271f3-7eba-46b2-ada3-750ff0e7f803",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "af64ad15-0ec4-4094-bcad-f9d067808799"
											}
										}
									],
									"id": "b563c6a8-60bb-4354-b584-864a09fe7619",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "03b3220c-1313-44ab-a97e-c98a0e9f1cb4"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "c4c5514c-e046-43f6-8c52-a3bf75318a3d"
											}
										}
									],
									"id": "24ec1c76-858f-445c-83c0-9cc453057627",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "a55397e6-9e21-4bdf-942b-ebbd5fadcfdc"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "1e52c132-93aa-4f30-adc4-9248a749e224"
											}
										}
									],
									"id": "2a82b43a-01bc-40ac-bd27-0dceb1881549",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "6b3ec9c3-8a98-47da-b477-dea0912b9d82"
						}
					],
					"id": "c50405cb-c313-4488-8ce8-56faa6e8c192",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a4b7c953-0e9d-4da9-8ad8-63b7f419c2f1"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "05939d06-1e63-4175-a93e-6a6494431bf2"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "24224c3c-5c07-4dcc-9b1c-cd7317e0c249"
											}
										}
									],
									"id": "dd9872a6-15ba-4345-a1d9-2eb789080a70",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "7a6e7433-3948-4a1c-b1d4-bb5cc7e9abd0"
											}
										}
									],
									"id": "8954476d-3399-41f2-b801-ee42f6e316b5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "b93f1b9a-fcaa-470b-8a55-18a919ac9310"
											}
										}
									],
									"id": "a2ea6120-804f-4665-9158-67e9402b4531",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "4d76debb-0559-4b57-954d-0f14ec31577d"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "9efaf864-a66d-4241-a909-59a6eca7907f"
											}
										}
									],
									"id": "8d40bdd3-a183-4540-a970-e32c0229dc85",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "e2a03283-2a36-4642-adab-f9866f252bb5"
											}
										}
									],
									"id": "ead0aad0-fb1f-4dc2-87d1-c77a0f103b73",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "23e0beaa-1727-4129-b3c0-3083109dfde6"
											}
										}
									],
									"id": "42dd665d-4cf4-43a4-833b-e14bd08348bc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "1f2e74de-364a-4fd1-8681-2031653e1876"
						}
					],
					"id": "558bb4d8-ce4c-4bc9-8932-707551ea90e0"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "0d6a45b1-85b0-4b06-8e2b-b61e4a495bc0"
													}
												}
											],
											"id": "0c987c21-7b91-4f19-b37e-61c49115807e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "1b88f57c-81df-43fa-83a3-adf1ea756e62"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "bcc51212-9672-4cb5-b380-ce4de1d5aa7a"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "7728c0dc-05f5-462d-acfa-6dd3c32c3f56"
													}
												}
											],
											"id": "27273134-7955-4a0b-a6d0-c60f0a5a8cee",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "f91d4229-a5f1-4388-9963-1c42037f6826"
													}
												}
											],
											"id": "338e55fb-3d31-404b-8302-977eed38968f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "8308e842-5933-4d46-b8da-193d005f5ed2"
													}
												}
											],
											"id": "f3709d85-d50f-4964-a346-dd5516b4d55c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "d2063cc5-1989-4213-b83e-06a523ec65c9"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "f2372e18-4739-4226-b6e9-5d7b463304f2"
													}
												}
											],
											"id": "3de060df-b4d6-4d29-990d-1a41fd824c9a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "e694c0a1-7bd8-4351-aba4-45060f6925be"
													}
												}
											],
											"id": "bcf00770-c78a-48be-835a-6894606a5d45",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "5c8c5dfd-5635-4800-89d9-af4ccc3ce87a"
													}
												}
											],
											"id": "b99b52fc-c11a-41e3-b6ea-b07f202491d1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "c5a358e6-7865-4875-ad02-59bb832b6524"
													}
												}
											],
											"id": "76d62ae8-11ef-4132-966a-038b633bbb3d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "5ac13766-5a43-4dc1-acba-b286fdd36fb1"
													}
												}
											],
											"id": "a294c21f-775b-42c4-84f1-c92728ab52dd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "57588279-9e0b-4264-9cfa-21e77dee48ea"
													}
												}
											],
											"id": "3722dfb4-6097-4c3c-92ab-b45bc6726161",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "e4da0580-70f0-49ff-8699-5388a3dafb4d"
								}
							],
							"id": "f3ac7f82-60aa-49a0-9e53-07c6c75ba825",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "12b66850-8f96-4de3-b0b7-b7c652d42934"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8352dbc2-1d6c-49e3-a54a-10f811fb0c23"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "6d58cb6d-2820-4e3e-83e2-b4909d9f4ed9"
													}
												}
											],
											"id": "ddf229dd-eccf-4699-877b-d7563b64ff48",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "f4bd97ea-5906-4879-9549-02504aed2ff9",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "74a9ed93-6367-4ca2-9e2d-a004f410b7a7"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "49d0362b-5c80-47fd-97c9-d453e8b56ff0"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "fd235769-3347-4d16-a43b-00b70229adac"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "f5df4313-0e88-427c-9ee3-e6fcf021c702"
													}
												}
											],
											"id": "82a56499-bb92-4c52-b164-1c9477088e48",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "477ebd06-d419-439c-b965-f2ee276c6198"
													}
												}
											],
											"id": "d9ce02ee-424a-4d58-8af2-991690a97df9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "59220c9d-bfd1-4d94-a86b-e26118fe19d1"
													}
												}
											],
											"id": "1e2dfb6e-f8c3-4e4a-9953-f60a74df672a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "b9bf2d11-c900-45ea-97d8-3638fa80bb13"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "dc878052-5643-458b-b4ea-3f653bfa716a"
													}
												}
											],
											"id": "f914a8bd-2001-4f58-a5a6-e749cadb8044",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "15402b77-1ba3-47ba-bb6c-4fe1d16350d4"
													}
												}
											],
											"id": "8e5dad65-81c2-4cb2-985b-b90f7dca26c2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "2ab7fc2a-75f6-4bd5-9384-14bb0a3b72aa"
													}
												}
											],
											"id": "cb8f8402-3271-4332-acf3-eff44b8c0835",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "9c45547d-7098-4e38-bbc5-632842dc888b"
													}
												}
											],
											"id": "8a250bf4-6612-4e50-99c4-906a131415eb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "214bd900-5ad1-4b99-9a18-eb42d2c7d4e0"
													}
												}
											],
											"id": "241c134a-fa30-4aae-9ef5-ca29ebf92363",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "4d33a824-dcd0-4513-b335-0a69fef41fc5"
													}
												}
											],
											"id": "3f75bfa6-e481-4765-b84e-c59857195626",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "e5d15e86-18ec-4d22-a12c-2cdaceed381d"
								}
							],
							"id": "ba5c6fce-2cdd-41cb-9845-23e1bec83220",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "2875be04-69fe-4331-9129-88681e49f413"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "c4609b95-7d14-4fa1-abf6-9f98a42c167b"
									}
								}
							]
						}
					],
					"id": "2061d321-4193-41d3-83d9-3cf28198f01e",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "ddadc485-6f48-4431-ae31-cd78b16a8526"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "962107fa-793f-49fd-a5df-44174b484ff7"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "5285418b-2523-4def-9471-6c88b0dde3fc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "87827ec3-88df-40ee-a7af-ba9c131f728d"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0696aa98-a983-4dbd-9b2f-b3a96d0303b3"
											}
										}
									],
									"id": "643905b0-21f8-4aca-a5ea-4ed6ae82429b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ae80f825-4501-4ccd-aa38-d3929421794b"
											}
										}
									],
									"id": "c1d1ade1-fa93-495a-ae01-764dbb32003e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "17033277-615b-422c-ab6a-a8e5a061de1c"
											}
										}
									],
									"id": "f6504169-d95a-44f7-abbd-4857178a31dc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c4c074d8-b5b4-47f2-9312-c6d09fe6001f"
											}
										}
									],
									"id": "3c8b83a7-b3f2-49c3-bb15-620c9f9f05f7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "8b58be7a-24fc-48a5-b80e-f52cc173a4a7"
											}
										}
									],
									"id": "31676032-87c7-4252-9849-e016aea7e308",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "7a9cd22d-911e-489d-95f0-8568e48409d0"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "06706749-475a-4279-a233-b0f3f153bf68"
											}
										}
									],
									"id": "7594cb73-9196-401f-8249-7e7d3c79607d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "9debd7bb-8cc1-4616-82ed-962ef507646b"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "e4966d0f-899c-4d19-97c4-1f2bf6039254"
											}
										}
									],
									"id": "87a9d71f-b5a8-4d92-837e-f234689623d1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e9c24b66-5b09-4895-9606-b0942cb256d9"
											}
										}
									],
									"id": "24c55cb0-9043-44b1-a6ca-6dabc428ad4a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "c82d2867-cfb9-4963-b737-b23f419142d0"
											}
										}
									],
									"id": "b5005eb0-6d9d-4be7-9356-0af5a8a5b076",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0bd99e58-91f8-4663-b3df-e1a187ed780e"
											}
										}
									],
									"id": "0bd583a2-b554-46fb-aedd-d75c81a29b67",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "41fe5466-76cd-401b-9413-7a981653ac53"
											}
										}
									],
									"id": "3d14b72a-c348-4fdd-8ea5-b16213cd0d8d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d3148ef2-934c-4d11-9604-ebb88ed60f8b"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "19b7fa09-9928-4ce4-ad5f-0465e840d585"
											}
										}
									],
									"id": "3afd7469-4e61-4835-9fc8-b2d63dbd733d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "80763819-9c2e-4489-b980-aeafd51967bc"
											}
										}
									],
									"id": "5c7e5b93-39cb-4ea7-bd9e-3682f1d17e5b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "24a59ff6-eba5-4ba9-b049-7b4bb5a65057"
											}
										}
									],
									"id": "2dc820ab-f6fc-4c80-8e9c-87e1a5a8893f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "4db8da5c-5ce6-4b66-b10d-e800d8f568fe"
											}
										}
									],
									"id": "791c8fff-61cf-4f77-977b-4c18d6540b2b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "92017cc9-a7fc-45a7-8381-012127c6bc90"
											}
										}
									],
									"id": "5e309f8b-3005-4324-b451-58562f4b6f5b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "b77cce00-d3f9-4f14-a407-776a7848a68e"
											}
										}
									],
									"id": "b8e86e7e-d5b9-4e5d-8299-3265b919a29a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a071922f-bc6a-49b5-b287-6566c60a5376"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "c980c164-5007-49d0-ada5-796f729f238e"
											}
										}
									],
									"id": "8df311ee-fa50-4c7c-a1db-900ffcfc3f89",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "210ae4a0-169e-4182-9e9e-bbae0d718177"
											}
										}
									],
									"id": "a94511eb-e319-4401-81bd-3721f4180737",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "e623c942-e87e-45d0-b41a-6f04116b9933"
											}
										}
									],
									"id": "70884ed7-c4e6-49d6-ab6c-7c7360b735f6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1278fae2-3634-4408-b880-e0f69bdca07a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "658af05f-c362-47c3-b98f-c3bf366758ca"
											}
										}
									],
									"id": "338f07b2-b9d0-4e3d-b65a-ba986dec7200",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "695768dd-f0db-4bcf-a3ac-21fdd0d8db8a"
						}
					],
					"id": "27bcd27c-ea69-4a69-80e4-5bcda0188956",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "8ff008d3-fba2-4b08-936c-6902910a7d47"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "47827fd6-08f8-48ec-a804-e91ddea47aff"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "819e0948-aa11-4806-96f7-76328ce8b4a7"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "2d084e45-3ee0-4419-9798-723dd969f2cf"
									}
								}
							],
							"id": "dea49681-da82-4c0e-96c1-e4e3332a8c5a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "d0e39069-7694-47df-89fa-71832af0ba73",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "b12c4563-8639-4924-957d-64765183e125",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "e374c32f-9248-4a90-a68a-a0ce51496edd",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "0d52fd20-e295-4417-be02-0713b4cc628e"
									}
								}
							],
							"id": "f65800f2-73e4-4e14-a4d1-84cc584df847",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "93c1f84a-8ffb-4d06-8b4d-47beffe7b341"
									}
								}
							],
							"id": "df3cb64e-d75a-40b8-ae34-391f06bfc055",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "a2f8bf66-c7d6-4427-b00c-963c88a442e1"
									}
								}
							],
							"id": "7ae66815-fc64-4fe3-976f-dd9e908ec423",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "972915b1-df6e-4450-a4ad-26568fc98eba",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "b4cafe4e-90e8-4e8f-93de-2a93e74b1a87"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "a0a75ff3-a0ea-4cc1-8819-3e3de0ae6419"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "6efab2bf-dcef-40fb-93bd-4bf0893b8c44"
									}
								}
							],
							"id": "8888d1ce-f4ad-4cfe-9c01-63c4fbfa56fd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "0cec7241-cfea-4bc0-b1e4-f5469c24ea44"
									}
								}
							],
							"id": "2da19232-4c7d-47bb-87e8-9778e6a421ca",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "a91a5cf1-9056-490f-975a-1e3540ccaf51"
									}
								}
							],
							"id": "8f9d618f-ff0d-4e76-bd12-5bc23ec65890",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "4099c4e3-b3a9-49ed-9f44-6c4a1e7b0202",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "30d2676d-d136-4a2f-9956-d5a0b71a33b4"
									}
								}
							],
							"id": "0c50fd81-759e-41b8-b254-1989466ae226",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "ae161de3-0d50-4933-85c9-8ceb8a3569ff"
				}
			],
			"id": "a3ce02f6-c468-45b7-b041-0fadb1604724"
		},
		{
			"name": "Tests Copy 8",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d669892b-9571-40c5-af83-5f37fdb27b57"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "60977a09-8fc4-4f95-910b-7e256e81254b"
											}
										}
									],
									"id": "121d8411-d08c-4fd4-bdcc-b3cc63a65da6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5b7082e8-29eb-48e9-bc09-5cc346b69243"
											}
										}
									],
									"id": "67153ee8-a5da-4312-b56e-74b77c7d900c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3120811f-c53b-4b2d-ba12-3f8f84570275"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "cc1579fd-da9d-49f4-a149-e4375a313a41"
											}
										}
									],
									"id": "e25e4bb2-557a-41a9-a2aa-0551a35e2d45",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "2bc942e6-e8b6-4981-abb2-d991ada0a514"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "064e4905-0419-468a-a7cc-c49c5b5ee781"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "cb46d1cf-b1fd-4b53-b1c2-b676821c724a"
											}
										}
									],
									"id": "a36c8fb7-b442-4a4a-9fba-22886af49860",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "41da9e8d-4439-4961-b2f6-8ff31e5fd706"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "298a62b6-3e78-484e-a9bc-bd779b1be86a"
											}
										}
									],
									"id": "f52e846f-b335-4bc3-9887-cf426ffb76a1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9edeb12d-9cb8-40c8-94f7-5e75638afdc8"
											}
										}
									],
									"id": "935d9779-a49c-48a6-a4cf-b69e84abd764",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8cf594e6-3f7d-475a-ab7b-e4e04e092101"
											}
										}
									],
									"id": "32b15c22-2ec6-4dbf-aacf-5a285666ec4b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "83fb476b-5a9f-4266-8b40-e5d4f75c5204"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "3ef7fb1d-a160-441d-95ae-9483596754d1"
											}
										}
									],
									"id": "1a020a6a-dc8d-4f4d-b86e-721faa813737",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "f6fbc133-db06-47a4-be17-ff4106725129"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "a3ea5b05-93de-4dff-a2f1-5b7a902e2d2b"
											}
										}
									],
									"id": "d8a0cf03-eacf-47d6-bf28-99af25364748",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "68d451f9-9508-43ba-9073-a65d3b0dbdbb"
						}
					],
					"id": "5a9aa63d-83d9-4b31-8dbd-0bcdfe47fcda",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "6faead1a-941b-4ec6-ac12-76db6309a9da"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "e14278a9-f30f-43c7-b4c1-01096f45211e"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "5cdc48a8-7d51-4b1b-9acb-f703e0a67abb"
											}
										}
									],
									"id": "5d8af022-7086-4720-bf89-5480827dd41b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "e0a6fdb0-8794-4c99-8ac2-10594e8a617e"
											}
										}
									],
									"id": "0748c327-e825-4382-8304-6cca909d26a1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "801c85be-c67f-4433-a4ea-6255d67c3eee"
											}
										}
									],
									"id": "72cb9f5d-670d-487a-8a87-9a60a621bea6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "a696ac27-c82c-417a-8239-589e010655ab"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "c0206c15-8799-4438-a9b4-173520daf79c"
											}
										}
									],
									"id": "1be86f3a-c44e-4a13-9075-59be40567b0b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "486f61e1-06de-438a-b2b4-c3a11253a654"
											}
										}
									],
									"id": "44f85c2b-2ec1-4532-8ba6-d2ca27e67c5c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "ae10aacf-dc76-47ab-8f39-ae4103917f75"
											}
										}
									],
									"id": "65800186-8e6c-4e2c-a4ed-666cd5ead0ed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "2d974478-9ce2-4aae-99bb-4609adf3d544"
						}
					],
					"id": "39c59dd1-856b-41ae-bc9b-9ede09f3f72d"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "449a97cb-a6e7-4233-a22b-4560161ccc3d"
													}
												}
											],
											"id": "7ca7d2c8-e31a-4eec-b574-74744d6270b5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "94c738bf-8d37-4dbf-b8da-98b0f5c627cd"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "bb6a8880-df1e-45a3-b1c4-5a8e4a3572be"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "739bbe53-94ff-4d83-8199-1f702e8b31b4"
													}
												}
											],
											"id": "5925d491-8110-4cda-aecf-bfcc0f164611",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "89df8fac-9417-4e46-83fd-8ca646da835c"
													}
												}
											],
											"id": "ff5f923e-c7e9-449a-925a-6b292eefb27a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "f20da06f-9140-4e1b-8a39-65e4567e9d48"
													}
												}
											],
											"id": "b2600d6c-61e3-4ba2-95d0-97110915c456",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2d7f890a-d788-4836-a734-d440c8d29446"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "20083c78-fc17-44bf-a946-8085909b5357"
													}
												}
											],
											"id": "e1780f62-bcbf-4e2e-9c21-ebade1fbe15b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "bffa2379-14e8-4e74-8f13-c69b573786f4"
													}
												}
											],
											"id": "12575f4e-8688-435b-b248-bbf47b72a8da",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "349094c6-8c4b-4ebb-936e-5e38dc0cb358"
													}
												}
											],
											"id": "6a7074a3-8a1d-4b1c-8b13-8d726f64f430",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "3884f004-6fd8-4784-b183-19f92fbfb3cb"
													}
												}
											],
											"id": "8bbc284d-5d2d-4603-9603-ebabcc1b8fb4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "aba6c2fd-7930-4b15-b096-56454ef70896"
													}
												}
											],
											"id": "a7a5f586-d4c0-4721-86e9-f9f5863ae73e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "e44b9796-8ca8-4fde-bee7-9e9472026070"
													}
												}
											],
											"id": "ea1d93d9-6995-4b76-99e4-3adb41cd5e29",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "177a8ab5-f789-450e-978e-d5cd516f9fcb"
								}
							],
							"id": "38d535c3-cd64-4692-abb2-781ff2ca2ee5",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "bc606058-6bb8-48e2-82f5-d413dd3a1991"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "c267863b-1ab6-439b-98b5-0c7bab0e6b2d"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "e4cb5845-b919-4ba2-a903-cfbbbe37dde9"
													}
												}
											],
											"id": "e907059a-067f-495e-bc1c-1bae7cf38b36",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "6e77c9d0-dc08-482a-9f17-9279f0888912",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "1c8942fd-9258-4c66-b016-5d22e8ada3bf"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "178d54fe-03c1-495d-afe9-3e138f313859"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "0489d420-ca04-4931-a027-59927aa7ecd1"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "49c2c986-4d3c-4904-ab95-e5f9ac4c0b20"
													}
												}
											],
											"id": "980cbffd-505c-425f-be97-811c29cf50be",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "0f267629-eb91-4cc2-a57c-708e4436a40f"
													}
												}
											],
											"id": "de248e05-c13c-4367-9b72-45e56d94c3d8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "ffafab78-4384-4f8a-975d-58ef2ea1de9e"
													}
												}
											],
											"id": "9d8e9e93-7195-4a95-ac56-e421ec88e0e0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "c877b0b1-54db-4dd4-a7e6-5c798117c6f9"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "d053b78b-2a78-4c4e-86f1-65df0e0a112b"
													}
												}
											],
											"id": "f98bcf5c-2fd6-4b83-b5d2-8bae603fbe78",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "8af04db0-eca6-4e58-b939-943dfe07d468"
													}
												}
											],
											"id": "afe4cd47-b8c2-4820-a022-e1d04f225aa4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "3f428733-9d55-4173-a013-f76e5ea519a7"
													}
												}
											],
											"id": "3456dc3a-73ec-478a-9259-3e0a425408ca",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "3dd61918-17ef-45de-a475-57877f9350bb"
													}
												}
											],
											"id": "93a1d142-c8e9-449c-ad0b-c77ab5c02898",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "395144b9-2e8c-46d6-86ac-622c256f4d36"
													}
												}
											],
											"id": "3b4f047e-d3e3-4b53-b351-3254fdae1062",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "69e921ce-689d-4c54-b79e-5094dc7cbaec"
													}
												}
											],
											"id": "031a264c-ce6f-4583-9f1f-086566122b80",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "7d5193b0-1508-415b-84c9-ae2da2156300"
								}
							],
							"id": "ee3eeb4f-df14-400b-b9b9-64d71a8b7a26",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "6c5a851a-0c9d-45d0-ac74-1567c317d2f7"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "16b68350-1ea4-4205-9eac-c309c656daa6"
									}
								}
							]
						}
					],
					"id": "94e2b5be-10c9-4617-813f-3db595724cf8",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "c163e540-a309-40c7-aabd-09bd310dab10"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "887f7a78-251f-4153-af53-c235edbabd8f"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "dfa7a688-8a83-4c8d-b8b5-2480023282a3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "95a358ad-0c4a-4424-89fb-6caddc6c9780"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "41d39b07-9cbe-44fe-8c1e-bbfb3a96d3db"
											}
										}
									],
									"id": "6d3eb8e0-8a74-403b-8bc6-05ff87b42e74",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "fe81391c-399c-442c-b551-e2c88beff42c"
											}
										}
									],
									"id": "7723477d-0774-4c06-ac15-b11c80c83ed1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "5004ad15-92ea-4e43-a47a-a152ec0a1ff8"
											}
										}
									],
									"id": "33c64f9f-5751-4cc7-9532-37b06b904596",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8edc43c8-2320-4ac4-8f4d-1a88c8e94b1e"
											}
										}
									],
									"id": "3d315c75-94ed-48d1-862c-5cd6d24994c5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "a5012655-aab2-4d26-b6f4-1a746c4e370a"
											}
										}
									],
									"id": "4a3e2d73-b89d-4717-916f-43ccb619c46c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e4acf6c3-f300-416d-b554-de2f49b47e57"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "cbdc858d-9f84-49f3-816c-6d68bef969de"
											}
										}
									],
									"id": "883319d4-a7fb-4ffd-8363-9eaf4bebe2a9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "1ee43584-ba62-4734-9bfe-8a7f6de5937b"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "3acbc96f-c8d2-4350-8902-b5a32dd50850"
											}
										}
									],
									"id": "17926858-8c3e-4dd9-b7b2-e320119d743a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "978bb6a4-075e-4e75-9377-af2d57097b5f"
											}
										}
									],
									"id": "0dd4182f-3b56-4eab-8123-446946d0d7d2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "a98d7b48-23c5-4d24-90d7-dcca3c09bb38"
											}
										}
									],
									"id": "e0e351fb-d5da-4b8e-a602-af9dce190bed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bbf8fe8f-b170-46ba-861d-2d0c5c841d07"
											}
										}
									],
									"id": "48b2fc99-8286-4703-b524-22f791c06f4a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "2448b38c-2988-43ee-8655-9aa7ee2131c2"
											}
										}
									],
									"id": "73083523-6a6f-469a-a642-e5a14f709144",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6e731896-0c35-4d46-ac01-090731932026"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "4475b06e-f19d-4042-8701-685dc0083ca5"
											}
										}
									],
									"id": "9dd714af-ec2f-4249-8ef9-78dded582701",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "416ad6d6-5241-4e10-aba8-7a8cf1a67b44"
											}
										}
									],
									"id": "92890e8c-5d95-45a8-b63f-7e5ec49ba5a3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "84d7a620-7eb6-4fb4-9046-05140dcf2a24"
											}
										}
									],
									"id": "4d765ebf-8483-4cf0-8262-bec3e1865cdf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "86874a11-2125-4c8b-bfe4-c7a6528fd5a2"
											}
										}
									],
									"id": "884d7a33-b2dd-4d52-b09c-1c3d2de82cbf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "fef20708-706c-4e38-a763-5888a2ab2b23"
											}
										}
									],
									"id": "c80fc52e-1171-4979-8a93-98500f382d89",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "81ca958f-b7dd-431e-93d4-c9ccaac21821"
											}
										}
									],
									"id": "94689472-84be-43cc-bc61-0d84450bdf8c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "81c06680-93b8-4f97-99e1-6fd82f5260e5"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "19a31b77-59b1-4e35-b479-8b3b8d3f5439"
											}
										}
									],
									"id": "7743b52a-f474-498d-8623-2c2243d9bb6c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "bacdeb6a-7dd7-4e53-8a76-ad87066df3de"
											}
										}
									],
									"id": "198e7b67-9dc4-42cf-b6a6-118c388f1f64",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "bfdf5c3d-770b-4003-a589-fc2572797e56"
											}
										}
									],
									"id": "56a36bb9-c409-4d73-84a3-b5ff7250d502",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b9c9c033-da3a-4a4a-bb88-c4579283555a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "3e5a137b-962d-4ddc-8f1d-8449bd605743"
											}
										}
									],
									"id": "7233c508-2af4-44b7-ac17-2c1378425311",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "cf0200ee-3d45-47aa-92f8-e7c90249f0f3"
						}
					],
					"id": "3d4eb055-f6d6-42dc-ba6e-64f9bdb2fde5",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "933dde87-716d-437d-a5eb-984e45d0fd8c"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "4cf05b47-5323-42c3-b355-06aa3bcaf396"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "da1f65d0-ba10-449b-82e5-716772c2c118"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "e4256e74-8beb-4f7b-a711-07d64231fb9d"
									}
								}
							],
							"id": "fc33775e-ee3f-437e-b439-a49a59d6c380",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "c5609f9c-c3da-49f7-af90-372b2f9bac34",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "4494f902-44c6-4326-a87c-dca4047d9aaf",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "21d24cec-fbf3-4abe-b72f-daebba2649e8",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "fb8d9d1d-1e01-4d10-949f-f7613146af50"
									}
								}
							],
							"id": "90e10f60-c4c6-406a-85c1-21d307a06ee6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "c2927df8-5025-4f69-9ee9-92f668536d48"
									}
								}
							],
							"id": "2431144f-72e1-421b-9c26-491ab05e5dcd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "490c5c53-fa5d-47dc-b3d2-26773e161c1c"
									}
								}
							],
							"id": "2ca65257-3027-4a30-8cde-617ab2fadf51",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "3a603bcd-73bd-4c27-b5a4-7d61bcd44215",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "bd254877-2869-43bd-ade0-f8a49c6f6e2e"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "246805f0-45c8-41aa-8b67-14bb783b490a"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "5008bb2f-fb94-4b9b-adb6-7fbc448efea4"
									}
								}
							],
							"id": "83c57d1b-ec4a-4ac7-bc0d-923596e7bdd9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "f20fcb3a-85c5-4258-92bc-a9f7ef0a352b"
									}
								}
							],
							"id": "0d94f796-648c-4cc5-bf68-7a5afc8be43c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "da6854f2-ec07-4600-b2a1-6d074a672102"
									}
								}
							],
							"id": "a1c90970-5cb5-4a88-8e9f-2e171555468f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "93e2416b-d21a-4ccc-9d6c-564a1463a841",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "58b95da0-6b75-4eb7-b05d-c7e578ff431b"
									}
								}
							],
							"id": "e676930d-829d-44b0-8f63-0ee25c9b9ca0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "7f41e389-0871-4aff-b788-a6eba92a2db0"
				}
			],
			"id": "b0c9588e-d565-4bf2-83f8-e0d8d9a3868f"
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9e646b4a-6652-49fe-9624-c76fc9f80397"
							}
						}
					],
					"id": "08f3d75d-1d27-4829-9a21-acc838fcf2f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "cf01e31b-f2c3-460d-9c4e-a9f6a0b8ee70"
							}
						}
					],
					"id": "b03f1705-d451-431d-8fbd-ccc2d40c676e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "1c5f1432-ce08-412a-a6ab-f1d114d315a8",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "cc33f812-95eb-4577-b22a-a3126728a918"
							}
						}
					],
					"id": "249854e2-8578-44f8-9765-e6d2f6166717",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "233f6861-ad1f-43f2-b1af-6242ce281982",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "834fc213-1af1-4a5e-8c3e-e2a5dc410dc0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "1e91e425-905a-4fd4-9050-803a5a31ae8d"
							}
						}
					],
					"id": "61e52abd-9066-4c60-b6da-2d68d4d24392",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "5feb87f7-670f-410a-a0b3-83ec77fa7333"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "63c52f6d-841a-475c-8937-a9ac3e79de52"
							}
						}
					],
					"id": "3ddf933c-834f-45b7-8f3c-301497ce7f6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "1a0bcda5-ac11-46b0-a331-da2a76a45d53"
							}
						}
					],
					"id": "8c05b950-bb5d-413e-b63f-d4d714a41182",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "626571d6-1941-429a-8085-ff0dfe08f1fe",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a68c97e4-8aeb-4491-8ac1-3126117abbca"
							}
						}
					],
					"id": "a6ea98e9-8d02-476a-bde4-52bd08055588",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "856ecd7d-68db-4a51-b18d-334c57ec27ef",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "81316fd6-ad5d-46cb-b224-58359f83891b"
							}
						}
					],
					"id": "1e2abe14-aa61-4c67-9d45-8b229e44f1cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "db155fc8-7fcd-4c59-bb6e-436df816f96a"
							}
						}
					],
					"id": "7b159c5f-3bfa-4ea9-992d-d77642b953ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "6e2fdd11-9290-482d-a0e5-07b6de4a2ddf",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "eee36fcd-68f9-4879-9c4a-19428e00a6bb"
							}
						}
					],
					"id": "9e0fb291-b134-4e92-b54f-a8a965fe413a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "92394115-9063-481f-862f-39c855d0a538",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "1df266a4-5084-499b-a201-74e14b4aa2c1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "c935d271-c429-43b4-a563-f14e8969c971"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "76d444ea-a6ae-4d20-a9a4-8aa90f5b17bc"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "218d7a4a-0196-4a56-97c4-f777cf1c0975"
							}
						}
					],
					"id": "e9075c85-a923-4762-bb3c-1e741c1bd660",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "36885d79-fd98-45d2-b6fa-d1a767a1d00c"
							}
						}
					],
					"id": "9585a661-0846-4623-9193-97452e8c41db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "0c05be06-7dd9-42d3-9f8d-0de79e57e276",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "fce591b4-0544-4cac-b5f4-510af2dd94ce"
							}
						}
					],
					"id": "5ed2445c-d18a-4f4f-9ba6-5e5e533b185f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "32367ce7-413a-40d3-88c9-11d7137dba98",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "66804842-2b75-444a-bc28-a57d33095734"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "18bae059-8306-4766-a9ff-8993acaba1fd"
							}
						}
					],
					"id": "5ca8b6f9-11da-41a4-bbc6-d58f9d327d24",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "f7895452-df10-44f9-bdc8-0231e8f8ff34"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "0924039d-bee0-4a2a-8b49-5db4b6f29eea"
							}
						}
					],
					"id": "f02ada34-6f92-40e7-99b8-049576e8637c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "ded1c66a-bfcb-4bee-a51c-f682f1b1db0b"
							}
						}
					],
					"id": "400d833a-8418-4879-b4b9-2fca4d4d22fa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "a7ec123e-ed7a-4d42-b261-9648c3be7eda",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "f4fec784-e1de-4129-a2d8-fdcbc7c1224b"
							}
						}
					],
					"id": "ce14ade2-f235-4a41-a24e-adfc93bac27e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "ce27ebe0-1d71-4bfd-a3d8-b5432c676abb",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "36c64b1b-7116-40cd-afff-209066b859a9"
							}
						}
					],
					"id": "0c464a6b-f6d8-4959-9fbe-ffe31fd3c5af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "f2d9954b-434a-49bd-aefc-cf5ffb27d658"
							}
						}
					],
					"id": "ed514f2d-c6c3-4411-9a8c-95017addd1cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "7f014aa7-d0c3-44b5-90c6-25ee1ca04b80",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "aa675f26-c51e-4296-be6e-cbeb83734ce4"
							}
						}
					],
					"id": "6f9e0742-a66f-4d7d-9ef1-500278695fa6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "df0471d1-de00-43d8-9f0d-7bf60a80d876",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "a16f0b3d-e3a8-433d-8c57-d9a9c015b756",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "e9ddcfb4-b576-465c-8078-29905815ab39"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "eb6617eb-3bd5-459a-b2e3-359a02f24140"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 2",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b0cd1376-7d5b-4dcb-adf4-e1c6b5cdba6e"
							}
						}
					],
					"id": "2e08fb1d-fa92-4bdd-9314-790518e02e8d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "3beb4dac-ba49-4790-9d8b-bcece3283f52"
							}
						}
					],
					"id": "7824d762-46b3-494c-afbb-be19d3ab1dde",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "f01d732f-9467-4926-951a-524e9a39b451",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "ec915b36-8e16-4a7a-bc88-f0b6ef5e9502"
							}
						}
					],
					"id": "86d74262-05ac-4d5a-8c4b-f7987b74d367",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "c31b0ac3-8ec3-4105-86ba-c94839035abb",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "9aea96e2-c3c9-4af2-8c36-4d1eee859458"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "6aa0351e-9de0-4a3a-a67e-5f2bae5eb20e"
							}
						}
					],
					"id": "bd473bb5-f38f-4721-9309-db4a45ce4ebf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "e4c63f41-0359-41ae-b2b7-198d1c10b00f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "2c2db46b-dcc8-41c9-9580-33c72654b55d"
							}
						}
					],
					"id": "a6a0e6a0-ee80-45cd-8d63-0414f5e9dced",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "91611270-f328-4553-90ed-69aaa498bcaa"
							}
						}
					],
					"id": "7c9044a3-cf3f-4e6d-98ff-828f5a71dee5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "e3d9cefd-0b5a-4bf6-a2b6-4489a343ef90",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "17d91711-c3ef-4272-9bc0-dc1a15527bf0"
							}
						}
					],
					"id": "bde0e92d-a7eb-40f3-a31f-7444499fe922",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "26891fe0-40b3-4ffa-9f9f-30323a4c6c43",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "5d378aa1-5110-4df9-8312-09a5fb6f6cd6"
							}
						}
					],
					"id": "915932ca-99b1-4e62-8230-816d3fed485d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "fb034777-0a33-45db-9bdd-434a799cd97b"
							}
						}
					],
					"id": "a2aa00cb-deaa-4cc1-88fa-e43a311715ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "78bde9dc-ef6d-4669-935f-a0934b43b7af",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "55a0a8c4-2cf2-4378-81e3-dd43fe7407d7"
							}
						}
					],
					"id": "7d121735-b6e7-4036-b65e-d56283a783ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "a44a7146-7eed-45c7-872b-7e281a20284a",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "8c416aaa-e88e-4add-acdb-a6f157d4516f",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "dc91d6f8-19b2-4f88-a3d9-10144d8bcc7e"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "88a0ee78-c22f-4055-ae6c-56c36fca0cdd"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 3",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "27fb430c-0496-4dc7-a604-1b699ec929fd"
							}
						}
					],
					"id": "1ca98fb2-f9c6-45e3-a4af-54b05437f32c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "db415528-5f56-402f-a22a-b797e3c020bd"
							}
						}
					],
					"id": "2b12fe70-e929-492d-829e-7c4fb806382f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "7255deec-06f8-4e3d-915e-5a67daa91247",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "8447895e-575f-4ff1-98e4-ada1441f9e37"
							}
						}
					],
					"id": "604173b4-5f4a-43c0-962a-c61fbd1a3a04",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "d0135235-8ca3-4af3-9c72-f5457e44bb0c",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "15ba529f-b116-4f64-8b84-a646baf773ef"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "b5d0c9e8-dae3-42da-b7e3-4e8b707eda1d"
							}
						}
					],
					"id": "15f2bc03-61e2-4cdb-99f8-ec1a091724bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "0005ea7f-4cb0-44db-8232-65c18ac3c733"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "ebe7413b-1cdd-4dcc-b316-385ace2369ed"
							}
						}
					],
					"id": "3d91dfa8-4d8e-466f-806e-ca1cf41c63da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "eebfd884-d365-482e-bbf8-e728e78c7c5f"
							}
						}
					],
					"id": "e57d6006-d2bc-4d34-9579-9150a16160e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "8fcc07bd-e527-4efe-8258-3fa458cb3b86",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "e0b6cb00-dd95-4941-88bb-58a9d67bdfe7"
							}
						}
					],
					"id": "2c39b968-6098-44ae-a53f-21055e3f9ef7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "82db236d-1eb3-4fb5-9bb0-1c6e1b949755",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "aafe07af-d4fe-4f31-9239-79972385f8a3"
							}
						}
					],
					"id": "2448be52-5887-4610-abdd-61f924521ab8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "b4fd8d50-1c77-4fe3-810b-8ce35ef0c735"
							}
						}
					],
					"id": "7bc6f3c5-0331-428e-a652-32af6242b3de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "03f9247f-0071-42ff-8562-94107e5b4360",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "568c8d40-b893-4903-887d-c27f3f523cdf"
							}
						}
					],
					"id": "83750aa1-9daf-4414-a4f0-d8225a2a4640",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "73a2e6aa-8bf3-4a7a-9bce-1602d0264e73",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "0af02e84-a314-487b-a9e4-b27df7b6c4ab",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "fc3e633a-3628-4197-b115-be4117851aca"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "ad03ecc3-0625-46b6-b5a2-109d784d07a7"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 4",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "371a9ddc-9016-443c-be9f-834107d2b40e"
							}
						}
					],
					"id": "871048cf-5bb7-47a1-8a44-9850c8d0f36a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "6b3cc89d-e753-47c5-b727-7093e4b007de"
							}
						}
					],
					"id": "471fbaf3-d12a-48a5-9f0b-e9c9aa8f1f9d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "29b53e24-2bf1-49ae-a81d-b4df7b3e58e4",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "d53554b2-4138-410f-8e09-663dac24b709"
							}
						}
					],
					"id": "6fbbb415-a118-4e83-897b-3cb10389efb3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "c27f4045-5f73-4a47-8397-17321faf0679",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "a343e556-d406-4d88-bb30-32bba46fe114"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "779492f7-b82e-44c2-a53e-7ca1d1dbb8dd"
							}
						}
					],
					"id": "3c6a01fc-658e-47ba-b6cb-e74cd3591604",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "f562186c-1393-4be9-9545-7f7f56fb0057"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "4d5707f6-d357-4eb1-a403-9804eefeef5d"
							}
						}
					],
					"id": "168f9dea-a18d-4acc-84f3-88f0ceb94e48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "c31d83b2-8854-4baf-8a57-04189bd955de"
							}
						}
					],
					"id": "eacb35d4-52eb-4787-8c81-19e9ca9e8c04",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "c649c795-ef6c-4d7e-a80e-325d2f0ca9df",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a91124a7-f677-4ba0-8ec6-5d60261f8e7b"
							}
						}
					],
					"id": "0aed7234-5ec5-4c9b-a16c-6f76c5cf5b77",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "83cf8d3b-e163-40bd-8cb1-739de158cbe1",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "0e4b06eb-ab57-4e47-a544-04cb0a97bdf0"
							}
						}
					],
					"id": "a0e21aa3-0c0e-4940-a07b-36fa7c8c5275",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "dc86491d-be59-4ffa-abd8-1eb8494aac38"
							}
						}
					],
					"id": "a7d0e4f7-eb7c-490f-bab9-100fb73363fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "58214c19-19f7-486a-98d0-4d36376f444b",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "1000014f-8f1d-4053-85dc-32032dacf669"
							}
						}
					],
					"id": "91925f2a-95fc-47bb-8ada-27b7e15a0bf5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "33290119-46df-40aa-bc45-517c1d0b3489",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "d36cb98d-7f61-4016-a819-a04c12f5ccf5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "f6e0cad6-307b-40cf-8424-69e14a83fcaa"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "8527a41c-5ba1-42d2-b99b-3edb880cd53d"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 5",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8fc1afe7-2330-4a1b-8c5c-4bb40130b07a"
							}
						}
					],
					"id": "ec4483bc-a4ec-4299-9a65-c8751b92ef6c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "fd6f417c-302f-42e1-b900-e4da05f2e9e5"
							}
						}
					],
					"id": "36118003-f368-4354-84a5-459c2449200d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "83e8aad0-a9f4-4eb0-9aef-49839297c5de",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "753a7580-6464-475e-a327-57dcd043b28a"
							}
						}
					],
					"id": "a4cc3002-86cc-431c-b731-1aaeffce11ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "4d96dcd6-37f7-4978-8089-07aa767e0c51",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "b369e56d-7940-4e4c-bf77-9091866c936c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "94dfe0b3-2818-42de-aafc-b724bf4a5bf3"
							}
						}
					],
					"id": "7e4d3658-9fb8-491e-8667-ab1f3bcea33d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "e35f180c-33cb-4e5e-b26e-2e82e905807e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "de7b9f90-0b53-4395-a142-c32daa7b6fb8"
							}
						}
					],
					"id": "0583cd17-f99d-401b-aa2a-a2a015d69532",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "bb444bdf-4f6d-4e93-b450-cbf510f8886f"
							}
						}
					],
					"id": "5d14a731-3b9f-4b04-8c4e-d5d2c1e6e16c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "1b9477b2-2a61-4db7-aa80-d0efa3c7e437",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "f7192c50-307d-4a39-b953-670fda83f1ea"
							}
						}
					],
					"id": "5b27e211-7315-444b-bec2-03de6388f511",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "e499eade-b197-4d4d-a135-57f831ba10bd",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "bfcc467a-69c4-48fe-9316-7ff45b236de1"
							}
						}
					],
					"id": "3e81732f-7354-408f-9bd5-5e6ecf195b37",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "24e532e2-eb4b-426f-bb8f-e204cb4565f5"
							}
						}
					],
					"id": "266c64dd-8a6d-4153-bfc9-ff3cf047e08a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "58991369-48e9-4819-b101-39efa826a183",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "9f9aea86-c721-4b4c-9ada-9303d6743f22"
							}
						}
					],
					"id": "1d82e8df-2a9d-421c-ac94-0a90c860c854",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "98d5866a-66ed-4354-b346-accac9ec68f7",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "1abb237b-dc5d-439e-81a3-265c2965a1d4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "5b6127a3-fc6e-40af-9c4c-760af710674e"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "c2746b98-3b39-481e-aa45-08425807f738"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 6",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1e2207ce-f3a6-49cc-8de2-c1f66a8b005d"
							}
						}
					],
					"id": "cf53193c-e53a-4b3b-8f02-0456ed1ca182",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "f77585d8-9a88-4a7b-9311-6d244eb10a5b"
							}
						}
					],
					"id": "643984aa-75a3-4546-9aae-0870b30906aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "48e74e7a-ad35-4a72-aaad-5e4817cbfb6d",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "4c45760e-1fb7-44b7-8b8e-0a42ea8b9084"
							}
						}
					],
					"id": "ecbf782c-7b0a-410b-bb80-39e3f5afeb25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "d367cdf0-7547-4a52-8cd2-f1537c802f00",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "a1afce44-8dd8-435e-adec-472ecc72f2f2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "7e2a8061-652d-413e-8699-d9326ec2273d"
							}
						}
					],
					"id": "22b7c984-b59f-4054-b9dd-1951a65f6700",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "8e19f2ed-f50c-4146-8ed5-72edd5aca286"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "cae4bf50-3730-435f-86f0-8df4ce55d80d"
							}
						}
					],
					"id": "1cee3a54-cccf-473e-8828-5a522475a6be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "94bdee80-0f06-4704-a776-d6c59bd10176"
							}
						}
					],
					"id": "23c961b9-8299-43d3-aba6-c2ec1e913aca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "7fe22c80-b7fa-49e9-b694-08787b1d2913",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "2f89ee33-e98c-4bd2-8097-47a646a4c268"
							}
						}
					],
					"id": "cf3cbb5f-0a89-4436-b452-5534bf9db29a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "2e344f02-42c0-4091-b17e-968272101413",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "4d6b7159-a15c-4f1a-9b1f-b1a83f31f8c8"
							}
						}
					],
					"id": "b650e59e-ba78-4039-be36-0c5c0f341348",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "87407eb7-91d6-41bf-8966-76c2537e0d24"
							}
						}
					],
					"id": "19b144dc-002d-4a3c-91fa-35b2e20222ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "854d18ff-10ed-472e-a098-2fb7a95f6f8c",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "7c1ef159-409c-4d55-9681-d9306ae468c6"
							}
						}
					],
					"id": "56ea4499-3b8a-4b2d-b53d-11e90a2e862f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "58cc9262-42f0-4e8b-b843-967806f6c017",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "57051c26-9e12-476e-b980-40b943330523",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "bbe3a5b0-779c-40eb-9584-5eef05819b66"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "6662b772-e41b-4fa0-bbed-7dc012876e4f"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 7",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fce67169-036d-4692-9b14-8315cb97fe7a"
							}
						}
					],
					"id": "4e180b5c-6511-4f74-9c6f-b3e0ac2caade",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "32eae18b-b0d6-42e8-af6d-3f0c555c8687"
							}
						}
					],
					"id": "6e5b2940-4bbe-4785-9a63-969bbc15ccf3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "d5d2d241-4a0f-45de-9cef-044112cf460e",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "40bb0ead-80c2-4805-9ebd-476bdb942a7d"
							}
						}
					],
					"id": "31fd7d5e-634a-4808-a52f-6f031b0a8c89",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "71d76e42-89f6-450a-934a-4f3d8e053b8b",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "33454bb8-e966-44bd-ba5b-3467a9d189da"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "769bf177-f9dd-4ca3-bb65-3ff9eef553b2"
							}
						}
					],
					"id": "18b26612-0d93-4876-848a-f632854594e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "cbce9ba6-2e39-49ff-89b7-69fedee00673"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "5485edea-6f70-4052-974a-e075f01d345d"
							}
						}
					],
					"id": "5e7051b6-c38e-4aa4-b3b5-4a666b82b03f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "35a0085c-8433-460b-ad3d-496a44347b7b"
							}
						}
					],
					"id": "e908ec64-420a-40e7-9ea9-4c14548790fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "14d16556-dddc-4562-9513-ebe4fb3a24d6",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "881a8170-a243-448a-8bbe-eea48840f8b6"
							}
						}
					],
					"id": "93f5ef06-bf0a-462a-99e7-b784f0a2dc75",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "0179a3dc-c922-4686-8930-3dae7ccfa2f6",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "0c80911f-1178-41a9-9333-a065b4f09f0f"
							}
						}
					],
					"id": "006d8ac6-a592-45ca-8035-5aedac15d01e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "afca1cbb-0d31-41a0-8204-12681bd92c24"
							}
						}
					],
					"id": "8c3b779b-756d-437d-a709-25e88e5553b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "310034d7-1f6f-4872-8a5b-006c19d2037f",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "7882a458-2d68-4517-91e2-3e67220eb58b"
							}
						}
					],
					"id": "5f53a35f-0ec4-46b0-a68d-32fbffea91f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "5787121f-1a15-46f4-8ecb-8adbc2a0b5cc",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "733b34c5-2096-4ef8-8fda-20ebcec8b5eb",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "9eecb7a1-9445-4e00-9690-50c56b799803"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "f1636b9d-00b3-4e86-b523-9182da1a64ca"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 8",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dcba38dd-cd55-4198-bf98-676ed3a81ea1"
							}
						}
					],
					"id": "2bb4c5db-7342-4b42-8fbd-3fb0c68f4ef4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "2012b2c9-076f-46b1-9e42-873ffbd4b9fd"
							}
						}
					],
					"id": "6fcfe16e-9b31-41cd-a089-db04c49c3e69",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "d4e086df-2bdf-4135-a6f2-5736af39f90c",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "7bda0747-2c1d-411d-9dff-8e1e57cb892a"
							}
						}
					],
					"id": "53f7bb71-2594-4939-a2d2-8315a1368209",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "1f22d404-255d-46c2-9cd2-1d9e0cacdc7c",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "efea2875-152f-46b0-9559-09bca72e734c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "c76440cb-403f-45c2-b357-c24a337fa2b7"
							}
						}
					],
					"id": "238a5221-b705-4a50-87e2-4cfc64bb9851",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "8a0352ca-3204-4f31-971a-636df64477dd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "fc5ce284-80db-4c07-bb01-5f4d97491d27"
							}
						}
					],
					"id": "0761c0bd-7603-4976-9cf0-3ee65eb878b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "f979b19a-4dfa-4ab9-9623-28421dc0f1c5"
							}
						}
					],
					"id": "6a517921-e3f8-4604-96ef-14e8c257f9d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "5f48dee9-462e-477d-ad05-5675583284e1",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "9a15164c-d5db-48d7-93ea-def315d30650"
							}
						}
					],
					"id": "ec57ce0a-30da-4710-9724-fb24ca991743",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "c77a64e3-4721-4982-8673-c30e058c7250",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "84f108ba-971a-4f6b-a49b-efbb6f9f5a1f"
							}
						}
					],
					"id": "9a8a0fa6-28bd-4028-9af5-8b7b5b3b05ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "ca1b4ef5-1803-4dc7-ac64-86e49d28db98"
							}
						}
					],
					"id": "95fbc4b6-05c3-4d11-817a-207640823b49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "0f3e1a0e-42bd-4549-b061-7b13f4a45a35",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "1b766472-bce2-4198-9a2b-e480f7c3f595"
							}
						}
					],
					"id": "966c4c54-33ff-4589-9d6a-7d25ffc9fd45",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "a476903b-1acd-48c9-88ec-2f47fd7959ed",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "b43337f1-bd4f-450a-b91c-c5f533a19068",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "060325b4-5076-4bf6-a3b9-bbe49770e0db"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "d1f2429d-1299-496f-b521-d33ccfb13a3b"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "fcfef215-3b57-47a0-a938-5e9c4e2167aa"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.response.text()) {",
					"  const url = pm.request.url.toString();",
					"  const requestHeaders = pm.request.headers;",
					"",
					"  const resCode = pm.response.code;",
					"  const resHeaders = pm.response.headers;",
					"",
					"",
					"  const req = {",
					"    url: 'https://hooks.slack.com/services/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',",
					"    method: 'POST',",
					"    body: {",
					"      mode: 'raw',",
					"      raw: JSON.stringify({",
					"        \"text\": \"Empty Response\",",
					"        \"blocks\": [",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": url",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": \"*Request*\"",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": `Headers:\\n\\`\\`\\`${JSON.stringify(requestHeaders, null, 2)}\\`\\`\\``",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": \"*Response*\"",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": `*Code*: ${resCode}\\n*Content*: ${response}\\n*Headers*:\\n\\`\\`\\`${JSON.stringify(resHeaders, null, 2)}\\`\\`\\``",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"actions\",",
					"            \"elements\": [",
					"              {",
					"                \"type\": \"button\",",
					"                \"text\": {",
					"                  \"type\": \"plain_text\",",
					"                  \"text\": \"Open AWS\",",
					"                  \"emoji\": true",
					"                },",
					"                \"value\": \"click_me_123\"",
					"              }",
					"            ]",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          }",
					"        ]",
					"      })",
					"    }",
					"  };",
					"",
					"  pm.sendRequest(req);",
					"",
					"  return postman.setNextRequest(null);",
					"} else {",
					"  console.log(JSON.stringify(pm.response.json(), null, 2));",
					"}",
					"",
					"console.log(pm.response.code);"
				],
				"id": "e64b590a-a947-4d03-9886-fdefc99ab45e"
			}
		}
	]
}